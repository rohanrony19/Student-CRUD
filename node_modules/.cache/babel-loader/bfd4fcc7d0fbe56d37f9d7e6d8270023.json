{"ast":null,"code":"import { isIOS as $7R18e$isIOS, getOwnerDocument as $7R18e$getOwnerDocument, runAfterTransition as $7R18e$runAfterTransition } from \"@react-aria/utils\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\n\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\n\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ((0, $7R18e$isIOS)()) {\n    if ($14c0b72509d70225$var$state === 'default') {\n      const documentObject = (0, $7R18e$getOwnerDocument)(target);\n      $14c0b72509d70225$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;\n      documentObject.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    $14c0b72509d70225$var$state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    let property = 'userSelect' in target.style ? 'userSelect' : 'webkitUserSelect';\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style[property]);\n    target.style[property] = 'none';\n  }\n}\n\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ((0, $7R18e$isIOS)()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== 'disabled') return;\n    $14c0b72509d70225$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      (0, $7R18e$runAfterTransition)(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === 'restoring') {\n          const documentObject = (0, $7R18e$getOwnerDocument)(target);\n          if (documentObject.documentElement.style.webkitUserSelect === 'none') documentObject.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n          $14c0b72509d70225$var$savedUserSelect = '';\n          $14c0b72509d70225$var$state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n        let property = 'userSelect' in target.style ? 'userSelect' : 'webkitUserSelect';\n        if (target.style[property] === 'none') target.style[property] = targetOldUserSelect;\n        if (target.getAttribute('style') === '') target.removeAttribute('style');\n        $14c0b72509d70225$var$modifiedElementMap.delete(target);\n      }\n    }\n}\n\nexport { $14c0b72509d70225$export$16a4697467175487 as disableTextSelection, $14c0b72509d70225$export$b0d6fa1ab32e3295 as restoreTextSelection };","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;AA6BA;AACA;;AACA,IAAIA,8BAAe,SAAnB;AACA,IAAIC,wCAAkB,EAAtB;AACA,IAAIC,2CAAqB,IAAIC,OAAJ,EAAzB;;AAEO,SAASC,yCAAT,CAA8BC,MAA9B,EAA8C;EACnD,IAAI,mBAAJ,EAAa;IACX,IAAIL,gCAAU,SAAd,EAAyB;MAEvB,MAAMM,iBAAiB,6BAAiBD,MAAjB,CAAvB;MACAJ,wCAAkBK,eAAeC,eAAf,CAA+BC,KAA/B,CAAqCC,gBAAvD;MACAH,eAAeC,eAAf,CAA+BC,KAA/B,CAAqCC,gBAArC,GAAwD,MAAxD;IACF;;IAEAT,8BAAQ,UAAR;EACF,CATA,MASO,IAAIK,kBAAkBK,WAAlB,IAAiCL,kBAAkBM,UAAvD,EAAmE;IACxE;IACA;IACA,IAAIC,WAAW,gBAAgBP,OAAOG,KAAvB,GAA+B,YAA/B,GAA8C,kBAA7D;IACAN,yCAAmBW,GAAnB,CAAuBR,MAAvB,EAA+BA,OAAOG,KAAP,CAAaI,QAAb,CAA/B;IACAP,OAAOG,KAAP,CAAaI,QAAb,IAAyB,MAAzB;EACF;AACF;;AAEO,SAASE,yCAAT,CAA8BT,MAA9B,EAA8C;EACnD,IAAI,mBAAJ,EAAa;IACX;IACA;IACA,IAAIL,gCAAU,UAAd,EACE;IAGFA,8BAAQ,WAAR,CAPW,CASX;IACA;;IACAe,WAAW;MACT;MACA;MACA,+BAAmB;QACjB;QACA,IAAIf,gCAAU,WAAd,EAA2B;UAEzB,MAAMM,iBAAiB,6BAAiBD,MAAjB,CAAvB;UACA,IAAIC,eAAeC,eAAf,CAA+BC,KAA/B,CAAqCC,gBAArC,KAA0D,MAA9D,EACEH,eAAeC,eAAf,CAA+BC,KAA/B,CAAqCC,gBAArC,GAAwDR,yCAAmB,EAA3E;UAGFA,wCAAkB,EAAlB;UACAD,8BAAQ,SAAR;QACF;MACF,CAZA;IAaF,CAhBA,EAgBG,GAhBH;EAiBF,CA5BA,MA4BO,IAAIK,kBAAkBK,WAAlB,IAAiCL,kBAAkBM,UAAvD,EACL;IACA;IACA;MAAA,IAAIN,UAAUH,yCAAmBc,GAAnB,CAAuBX,MAAvB,CAAd,EAA8C;QAC5C,IAAIY,sBAAsBf,yCAAmBgB,GAAnB,CAAuBb,MAAvB,CAA1B;QACA,IAAIO,WAAW,gBAAgBP,OAAOG,KAAvB,GAA+B,YAA/B,GAA8C,kBAA7D;QAEA,IAAIH,OAAOG,KAAP,CAAaI,QAAb,MAA2B,MAA/B,EACEP,OAAOG,KAAP,CAAaI,QAAb,IAAyBK,mBAAzB;QAGF,IAAIZ,OAAOc,YAAP,CAAoB,OAApB,MAAiC,EAArC,EACEd,OAAOe,eAAP,CAAuB,OAAvB;QAEFlB,yCAAmBmB,MAAnB,CAA0BhB,MAA1B;MACF;IAAA;AAEJ","names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","documentObject","documentElement","style","webkitUserSelect","HTMLElement","SVGElement","property","set","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\textSelection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getOwnerDocument, isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element): void {\n  if (isIOS()) {\n    if (state === 'default') {\n\n      const documentObject = getOwnerDocument(target);\n      savedUserSelect = documentObject.documentElement.style.webkitUserSelect;\n      documentObject.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    let property = 'userSelect' in target.style ? 'userSelect' : 'webkitUserSelect';\n    modifiedElementMap.set(target, target.style[property]);\n    target.style[property] = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element): void {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n\n          const documentObject = getOwnerDocument(target);\n          if (documentObject.documentElement.style.webkitUserSelect === 'none') {\n            documentObject.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target) as string;\n      let property = 'userSelect' in target.style ? 'userSelect' : 'webkitUserSelect';\n\n      if (target.style[property] === 'none') {\n        target.style[property] = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}