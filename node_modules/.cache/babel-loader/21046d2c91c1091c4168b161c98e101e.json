{"ast":null,"code":"import { usePress as $f6c31cce2adf654f$export$45712eceda6fad21 } from \"./usePress.mjs\";\nimport { useGlobalListeners as $4k2kv$useGlobalListeners, getOwnerDocument as $4k2kv$getOwnerDocument, focusWithoutScrolling as $4k2kv$focusWithoutScrolling, useDescription as $4k2kv$useDescription, mergeProps as $4k2kv$mergeProps } from \"@react-aria/utils\";\nimport { useRef as $4k2kv$useRef } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\n\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = (0, $4k2kv$useRef)(undefined);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $4k2kv$useGlobalListeners)();\n  let {\n    pressProps: pressProps\n  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n    isDisabled: isDisabled,\n\n    onPressStart(e) {\n      e.continuePropagation();\n\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) onLongPressStart({ ...e,\n          type: 'longpressstart'\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {\n            bubbles: true\n          })); // Ensure target is focused. On touch devices, browsers typically focus on pointer up.\n\n          if ((0, $4k2kv$getOwnerDocument)(e.target).activeElement !== e.target) (0, $4k2kv$focusWithoutScrolling)(e.target);\n          if (onLongPress) onLongPress({ ...e,\n            type: 'longpress'\n          });\n          timeRef.current = undefined;\n        }, threshold); // Prevent context menu, which may be opened on long press on touch devices\n\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({ ...e,\n        type: 'longpressend'\n      });\n    }\n\n  });\n  let descriptionProps = (0, $4k2kv$useDescription)(onLongPress && !isDisabled ? accessibilityDescription : undefined);\n  return {\n    longPressProps: (0, $4k2kv$mergeProps)(pressProps, descriptionProps)\n  };\n}\n\nexport { $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;AAiDA,MAAMA,0CAAoB,GAA1B;;AAMO,SAASC,yCAAT,CAAsBC,KAAtB,EAA2C;EAChD,IAAI;IAAAC,YACFA,UADE;IACQC,kBACVA,gBAFE;IAEcC,gBAChBA,cAHE;IAGYC,aACdA,WAJE;IAKFC,YAAYP,uCALV;IAKUQ,0BACZA;EANE,IAOAN,KAPJ;EASA,MAAMO,UAAU,mBAAkDC,SAAlD,CAAhB;EACA,IAAI;IAAAC,mBAACA,iBAAD;IAAkBC,sBAAEA;EAApB,IAA4C,gCAAhD;EAEA,IAAI;IAAAC,YAACA;EAAD,IAAe,+CAAS;gBAC1BV,UAD0B;;IAE1BW,aAAaC,CAAb,EAAc;MACZA,EAAEC,mBAAF;;MACA,IAAID,EAAEE,WAAF,KAAkB,OAAlB,IAA6BF,EAAEE,WAAF,KAAkB,OAAnD,EAA4D;QAC1D,IAAIb,gBAAJ,EACEA,iBAAiB,EACf,GAAGW,CADY;UAEfG,MAAM;QAFS,CAAjB;QAMFT,QAAQU,OAAR,GAAkBC,WAAW;UAC3B;UACAL,EAAEM,MAAF,CAASC,aAAT,CAAuB,IAAIC,YAAJ,CAAiB,eAAjB,EAAkC;YAACC,SAAS;UAAV,CAAlC,CAAvB,EAF2B,CAI3B;;UACA,IAAI,6BAAiBT,EAAEM,MAAnB,EAA2BI,aAA3B,KAA6CV,EAAEM,MAAnD,EACE,kCAAsBN,EAAEM,MAAxB;UAGF,IAAIf,WAAJ,EACEA,YAAY,EACV,GAAGS,CADO;YAEVG,MAAM;UAFI,CAAZ;UAKFT,QAAQU,OAAR,GAAkBT,SAAlB;QACF,CAhBkB,EAgBfH,SAhBe,CAAlB,CAR0D,CA0B1D;;QACA,IAAIQ,EAAEE,WAAF,KAAkB,OAAtB,EAA+B;UAC7B,IAAIS,gBAAgBX;YAClBA,EAAEY,cAAF;UACF,CAFA;;UAIAhB,kBAAkBI,EAAEM,MAApB,EAA4B,aAA5B,EAA2CK,aAA3C,EAA0D;YAACE,MAAM;UAAP,CAA1D;UACAjB,kBAAkBkB,MAAlB,EAA0B,WAA1B,EAAuC;YACrC;YACA;YACAT,WAAW;cACTR,qBAAqBG,EAAEM,MAAvB,EAA+B,aAA/B,EAA8CK,aAA9C;YACF,CAFA,EAEG,EAFH;UAGF,CANA,EAMG;YAACE,MAAM;UAAP,CANH;QAOF;MACF;IACF,CA9C0B;;IA+C1BE,WAAWf,CAAX,EAAY;MACV,IAAIN,QAAQU,OAAZ,EACEY,aAAatB,QAAQU,OAArB;MAGF,IAAId,mBAAmBU,EAAEE,WAAF,KAAkB,OAAlB,IAA6BF,EAAEE,WAAF,KAAkB,OAAlE,CAAJ,EACEZ,eAAe,EACb,GAAGU,CADU;QAEbG,MAAM;MAFO,CAAf;IAKJ;;EA1D0B,CAAT,CAAnB;EA6DA,IAAIc,mBAAmB,2BAAe1B,eAAe,CAACH,UAAhB,GAA6BK,wBAA7B,GAAwDE,SAAvE,CAAvB;EAEA,OAAO;IACLuB,gBAAgB,uBAAWpB,UAAX,EAAuBmB,gBAAvB;EADX,CAAP;AAGF","names":["$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","props","isDisabled","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","undefined","addGlobalListener","removeGlobalListener","pressProps","onPressStart","e","continuePropagation","pointerType","type","current","setTimeout","target","dispatchEvent","PointerEvent","bubbles","activeElement","onContextMenu","preventDefault","once","window","onPressEnd","clearTimeout","descriptionProps","longPressProps"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent} from '@react-types/shared';\nimport {focusWithoutScrolling, getOwnerDocument, mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef<ReturnType<typeof setTimeout> | undefined>(undefined);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      e.continuePropagation();\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n\n          // Ensure target is focused. On touch devices, browsers typically focus on pointer up.\n          if (getOwnerDocument(e.target).activeElement !== e.target) {\n            focusWithoutScrolling(e.target as FocusableElement);\n          }\n\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = undefined;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : undefined);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}