{"ast":null,"code":"import { isFocusVisible as $isWE5$isFocusVisible, useFocusVisibleListener as $isWE5$useFocusVisibleListener, useFocus as $isWE5$useFocus, useFocusWithin as $isWE5$useFocusWithin } from \"@react-aria/interactions\";\nimport { useRef as $isWE5$useRef, useState as $isWE5$useState, useCallback as $isWE5$useCallback } from \"react\";\n\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = (0, $isWE5$useRef)({\n    isFocused: false,\n    isFocusVisible: autoFocus || (0, $isWE5$isFocusVisible)()\n  });\n  let [isFocused, setFocused] = (0, $isWE5$useState)(false);\n  let [isFocusVisibleState, setFocusVisible] = (0, $isWE5$useState)(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = (0, $isWE5$useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = (0, $isWE5$useCallback)(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  (0, $isWE5$useFocusVisibleListener)(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $isWE5$useFocus)({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $isWE5$useFocusWithin)({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n\nexport { $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing };","map":{"version":3,"mappings":";;;AAoCO,SAASA,yCAAT,GAAoD;EAAA,IAA9BC,KAA8B,uEAAF,EAAE;EACzD,IAAI;IACFC,YAAY,KADV;IACUC,aACZA,WAFE;IAESC,QACXA;EAHE,IAIAH,KAJJ;EAKA,IAAII,QAAQ,mBAAO;IACjBC,WAAW,KADM;IAEjBC,gBAAgBL,aAAa;EAFZ,CAAP,CAAZ;EAIA,IAAI,CAACI,SAAD,EAAYE,UAAZ,IAA0B,qBAAS,KAAT,CAA9B;EACA,IAAI,CAACC,mBAAD,EAAsBC,eAAtB,IAAyC,qBAAS,MAAML,MAAMM,OAAN,CAAcL,SAAd,IAA2BD,MAAMM,OAAN,CAAcJ,cAAxD,CAA7C;EAEA,IAAIK,cAAc,wBAAY,MAAMF,gBAAgBL,MAAMM,OAAN,CAAcL,SAAd,IAA2BD,MAAMM,OAAN,CAAcJ,cAAzD,CAAlB,EAA4F,EAA5F,CAAlB;EAEA,IAAIM,gBAAgB,wBAAYP;IAC9BD,MAAMM,OAAN,CAAcL,SAAd,GAA0BA,SAA1B;IACAE,WAAWF,SAAX;IACAM;EACF,CAJoB,EAIjB,CAACA,WAAD,CAJiB,CAApB;EAMA,oCAAyBL,cAAD,IAAC;IACvBF,MAAMM,OAAN,CAAcJ,cAAd,GAA+BA,cAA/B;IACAK;EACF,CAHA,EAGG,EAHH,EAGO;iBAACT;EAAD,CAHP;EAKA,IAAI;IAAAW,YAACA;EAAD,IAAe,qBAAS;IAC1BC,YAAYX,MADc;mBAE1BS;EAF0B,CAAT,CAAnB;EAKA,IAAI;IAAAG,kBAACA;EAAD,IAAqB,2BAAe;IACtCD,YAAY,CAACX,MADyB;IAEtCa,qBAAqBJ;EAFiB,CAAf,CAAzB;EAKA,OAAO;eACLP,SADK;IAELC,gBAAgBE,mBAFX;IAGLK,YAAYV,SAASY,gBAAT,GAA4BF;EAHnC,CAAP;AAKF","names":["$f7dceffc5ad7768b$export$4e328f61c538687f","props","autoFocus","isTextInput","within","state","isFocused","isFocusVisible","setFocused","isFocusVisibleState","setFocusVisible","current","updateState","onFocusChange","focusProps","isDisabled","focusWithinProps","onFocusWithinChange"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\focus\\dist\\packages\\@react-aria\\focus\\src\\useFocusRing.ts"],"sourcesContent":["import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useRef, useState} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}