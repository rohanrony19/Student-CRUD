{"ast":null,"code":"function memo(getDeps, fn, opts) {\n  let deps = opts.initialDeps ?? [];\n  let result;\n\n  function memoizedFunction() {\n    var _a, _b, _c, _d;\n\n    let depTime;\n    if (opts.key && ((_a = opts.debug) == null ? void 0 : _a.call(opts))) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n\n    if (!depsChanged) {\n      return result;\n    }\n\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && ((_b = opts.debug) == null ? void 0 : _b.call(opts))) resultTime = Date.now();\n    result = fn(...newDeps);\n\n    if (opts.key && ((_c = opts.debug) == null ? void 0 : _c.call(opts))) {\n      const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n      const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n      const resultFpsPercentage = resultEndTime / 16;\n\n      const pad = (str, num) => {\n        str = String(str);\n\n        while (str.length < num) {\n          str = \" \" + str;\n        }\n\n        return str;\n      };\n\n      console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n    }\n\n    (_d = opts == null ? void 0 : opts.onChange) == null ? void 0 : _d.call(opts, result);\n    return result;\n  }\n\n  memoizedFunction.updateDeps = newDeps => {\n    deps = newDeps;\n  };\n\n  return memoizedFunction;\n}\n\nfunction notUndefined(value, msg) {\n  if (value === void 0) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : \"\"}`);\n  } else {\n    return value;\n  }\n}\n\nconst approxEqual = (a, b) => Math.abs(a - b) <= 1;\n\nconst debounce = (targetWindow, fn, ms) => {\n  let timeoutId;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    targetWindow.clearTimeout(timeoutId);\n    timeoutId = targetWindow.setTimeout(() => fn.apply(this, args), ms);\n  };\n};\n\nexport { approxEqual, debounce, memo, notUndefined };","map":{"version":3,"mappings":"AAIgB,cACdA,OADc,EAEdC,EAFc,EAGdC,IAHc,EASd;EACI,WAAOA,KAAKC,WAAL,IAAoB,EAA3B;EACA;;EAEJ,SAASC,gBAAT,GAAqC;IAbvB;;IAcR;IACJ,IAAIF,KAAKG,GAAL,KAAK,CAAOC,UAAKC,KAAZ,KAAO,IAAP,GAAO,MAAP,GAAOD,aAAZ,CAAJ,EAAgCE,UAAUC,KAAKC,GAAL,EAAV;IAEhC,MAAMC,UAAUX,SAAhB;IAEA,MAAMY,cACJD,QAAQE,MAAR,KAAmBC,KAAKD,MAAxB,IACAF,QAAQI,IAAR,CAAa,CAACC,GAAD,EAAWC,KAAX,KAA6BH,KAAKG,KAAL,MAAgBD,GAA1D,CAFF;;IAIA,IAAI,CAACJ,WAAL,EAAkB;MACT;IAAA;;IAGFE;IAEH;IACJ,IAAIZ,KAAKG,GAAL,KAAK,CAAOa,UAAKX,KAAZ,KAAO,IAAP,GAAO,MAAP,GAAOW,aAAZ,CAAJ,EAAgCC,aAAaV,KAAKC,GAAL,EAAb;IAEvBU,YAAG,GAAGT,OAAN;;IAET,IAAIT,KAAKG,GAAL,KAAK,CAAOgB,UAAKd,KAAZ,KAAO,IAAP,GAAO,MAAP,GAAOc,aAAZ,CAAJ,EAAgC;MACxB,mBAAaC,KAAKC,KAAL,CAAK,CAAOd,KAAKC,GAAL,KAAaF,OAApB,IAAgC,GAArC,IAA4C,GAAzD;MACA,sBAAgBc,KAAKC,KAAL,CAAK,CAAOd,KAAKC,GAAL,KAAaS,UAApB,IAAmC,GAAxC,IAA+C,GAA/D;MACN,MAAMK,sBAAsBC,gBAAgB,EAA5C;;MAEM,YAAM,CAACC,GAAD,EAAuBC,GAAvB,KAAuC;QACjDD,MAAME,OAAOF,GAAP,CAAN;;QACO,WAAIb,MAAJ,GAAac,GAAb,EAAkB;UACvBD,MAAM,MAAMA,GAAZ;QAAY;;QAEP;MACT,CANM;;MAQEG,aACN,OAAOC,IAAIL,aAAJ,EAAmB,CAAnB,CAAqB,KAAKK,IAAIC,UAAJ,EAAgB,CAAhB,CAAkB,KAD7C,EAEN;AAAA;AAAA;AAAA,yBAGiBT,KAAKU,GAAL,CACX,CADW,EAEXV,KAAKW,GAAL,CAAS,MAAM,MAAMT,mBAArB,EAA0C,GAA1C,CAFW,CAGZ,gBARC,EASNtB,6BAAMG,GATA;IAUR;;IAGF,mCAAM6B,QAAN,mCAAiBd,MAAjB;IAEO;EAAA;;EAIQhB,8BAAcO,OAAD,IAAyB;IAC9CG;EACT,CAFiB;;EAIV;AACT;;AAEgB,sBAAgBqB,KAAhB,EAAsCC,GAAtC,EAAuD;EACrE,IAAID,UAAU,MAAd,EAAyB;IACjB,UAAIE,KAAJ,CAAU,uBAAuBD,MAAM,KAAKA,GAAG,EAAd,GAAmB,EAAE,EAAtD;EAAwD,CADhE,MAEO;IACE;EAAA;AAEX;;AAEa,oBAAc,CAACE,CAAD,EAAYC,CAAZ,KAA0BjB,KAAKkB,GAAL,CAASF,IAAIC,CAAb,KAAmB,CAA3D;;AAEN,MAAME,WAAW,CACtBC,YADsB,EAEtBzC,EAFsB,EAGtB0C,EAHsB,KAInB;EACC;EACJ,OAAO,YAA0C;IAAA,kCAAlBC,IAAkB;MAAlBA,IAAkB;IAAA;;IAC/CF,aAAaG,YAAb,CAA0BC,SAA1B;IACYA,yBAAaC,UAAb,CAAwB,MAAM9C,GAAG+C,KAAH,CAAS,IAAT,EAAeJ,IAAf,CAA9B,EAAoDD,EAApD;EACd,CAHA;AAIF,CAVO","names":["getDeps","fn","opts","initialDeps","memoizedFunction","key","_a","debug","depTime","Date","now","newDeps","depsChanged","length","deps","some","dep","index","_b","resultTime","result","_c","Math","round","resultFpsPercentage","resultEndTime","str","num","String","console","pad","depEndTime","max","min","onChange","value","msg","Error","a","b","abs","debounce","targetWindow","ms","args","clearTimeout","timeoutId","setTimeout","apply"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@tanstack\\virtual-core\\src\\utils.ts"],"sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends ReadonlyArray<any>, TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => boolean\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  function memoizedFunction(): TResult {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result\n  }\n\n  // Attach updateDeps to the function itself\n  memoizedFunction.updateDeps = (newDeps: [...TDeps]) => {\n    deps = newDeps\n  }\n\n  return memoizedFunction\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) <= 1\n\nexport const debounce = (\n  targetWindow: Window & typeof globalThis,\n  fn: Function,\n  ms: number,\n) => {\n  let timeoutId: number\n  return function (this: any, ...args: Array<any>) {\n    targetWindow.clearTimeout(timeoutId)\n    timeoutId = targetWindow.setTimeout(() => fn.apply(this, args), ms)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}