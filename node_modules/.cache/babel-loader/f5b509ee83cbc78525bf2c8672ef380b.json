{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $5dc95899b306f630$export$c9058316764c140e() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  if (refs.length === 1 && refs[0]) return refs[0];\n  return value => {\n    let hasCleanup = false;\n    const cleanups = refs.map(ref => {\n      const cleanup = $5dc95899b306f630$var$setRef(ref, value);\n      hasCleanup || (hasCleanup = typeof cleanup == 'function');\n      return cleanup;\n    });\n    if (hasCleanup) return () => {\n      cleanups.forEach((cleanup, i) => {\n        if (typeof cleanup === 'function') cleanup();else $5dc95899b306f630$var$setRef(refs[i], null);\n      });\n    };\n  };\n}\n\nfunction $5dc95899b306f630$var$setRef(ref, value) {\n  if (typeof ref === 'function') return ref(value);else if (ref != null) ref.current = value;\n}\n\nexport { $5dc95899b306f630$export$c9058316764c140e as mergeRefs };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;AAiBO,SAASA,yCAAT,GAAqF;EAAA,kCAA5DC,IAA4D;IAA5DA,IAA4D;EAAA;;EAC1F,IAAIA,KAAKC,MAAL,KAAgB,CAAhB,IAAqBD,IAAI,CAAC,CAAD,CAA7B,EACE,OAAOA,IAAI,CAAC,CAAD,CAAX;EAGF,OAAQE,KAAD,IAAC;IACN,IAAIC,aAAa,KAAjB;IAEA,MAAMC,WAAWJ,KAAKK,GAAL,CAASC;MACxB,MAAMC,UAAUC,6BAAOF,GAAP,EAAYJ,KAAZ,CAAhB;MACAC,4BAAe,OAAOI,OAAP,IAAkB,UAAjC;MACA,OAAOA,OAAP;IACF,CAJiB,CAAjB;IAMA,IAAIJ,UAAJ,EACE,OAAO;MACLC,SAASK,OAAT,CAAiB,CAACF,OAAD,EAAUG,CAAV,KAAU;QACzB,IAAI,OAAOH,OAAP,KAAmB,UAAvB,EACEA,UADF,KAGEC,6BAAOR,IAAI,CAACU,CAAD,CAAX,EAAgB,IAAhB;MAEJ,CANA;IAOF,CARA;EAUJ,CApBA;AAqBF;;AAEA,SAASF,4BAAT,CAAmBF,GAAnB,EAAyEJ,KAAzE,EAAiF;EAC/E,IAAI,OAAOI,GAAP,KAAe,UAAnB,EACE,OAAOA,IAAIJ,KAAJ,CAAP,CADF,KAEO,IAAII,OAAO,IAAX,EACLA,IAAIK,OAAJ,GAAcT,KAAd;AAEJ","names":["$5dc95899b306f630$export$c9058316764c140e","refs","length","value","hasCleanup","cleanups","map","ref","cleanup","$5dc95899b306f630$var$setRef","forEach","i","current"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\mergeRefs.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {MutableRefObject, Ref} from 'react';\n\n/**\n * Merges multiple refs into one. Works with either callback or object refs.\n */\nexport function mergeRefs<T>(...refs: Array<Ref<T> | MutableRefObject<T> | null | undefined>): Ref<T> {\n  if (refs.length === 1 && refs[0]) {\n    return refs[0];\n  }\n\n  return (value: T | null) => {\n    let hasCleanup = false;\n\n    const cleanups = refs.map(ref => {\n      const cleanup = setRef(ref, value);\n      hasCleanup ||= typeof cleanup == 'function';\n      return cleanup;\n    });\n\n    if (hasCleanup) {\n      return () => {\n        cleanups.forEach((cleanup, i) => {\n          if (typeof cleanup === 'function') {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        });\n      };\n    }\n  };\n}\n\nfunction setRef<T>(ref: Ref<T> | MutableRefObject<T> | null | undefined, value: T) {\n  if (typeof ref === 'function') {\n    return ref(value);\n  } else if (ref != null) {\n    ref.current = value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}