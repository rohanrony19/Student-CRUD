{"ast":null,"code":"import { getOffset as $ab71dadb03a6fb2e$export$622cea445a1c5b7d } from \"./getOffset.mjs\";\nimport { useRef as $1rnCS$useRef } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/* eslint-disable rulesdir/pure-render */\n// Keep track of elements that we are currently handling dragging for via useDrag1D.\n// If there's an ancestor and a descendant both using useDrag1D(), and the user starts\n// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.\n\nconst $9cc09df9fd7676be$var$draggingElements = [];\n\nfunction $9cc09df9fd7676be$export$7bbed75feba39706(props) {\n  console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');\n  let {\n    containerRef: containerRef,\n    reverse: reverse,\n    orientation: orientation,\n    onHover: onHover,\n    onDrag: onDrag,\n    onPositionChange: onPositionChange,\n    onIncrement: onIncrement,\n    onDecrement: onDecrement,\n    onIncrementToMax: onIncrementToMax,\n    onDecrementToMin: onDecrementToMin,\n    onCollapseToggle: onCollapseToggle\n  } = props;\n\n  let getPosition = e => orientation === 'horizontal' ? e.clientX : e.clientY;\n\n  let getNextOffset = e => {\n    let containerOffset = (0, $ab71dadb03a6fb2e$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);\n    let mouseOffset = getPosition(e);\n    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;\n    return nextOffset;\n  };\n\n  let dragging = (0, $1rnCS$useRef)(false);\n  let prevPosition = (0, $1rnCS$useRef)(0); // Keep track of the current handlers in a ref so that the events can access them.\n\n  let handlers = (0, $1rnCS$useRef)({\n    onPositionChange: onPositionChange,\n    onDrag: onDrag\n  });\n  handlers.current.onDrag = onDrag;\n  handlers.current.onPositionChange = onPositionChange;\n\n  let onMouseDragged = e => {\n    e.preventDefault();\n    let nextOffset = getNextOffset(e);\n\n    if (!dragging.current) {\n      dragging.current = true;\n      if (handlers.current.onDrag) handlers.current.onDrag(true);\n      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);\n    }\n\n    if (prevPosition.current === nextOffset) return;\n    prevPosition.current = nextOffset;\n    if (onPositionChange) onPositionChange(nextOffset);\n  };\n\n  let onMouseUp = e => {\n    const target = e.target;\n    dragging.current = false;\n    let nextOffset = getNextOffset(e);\n    if (handlers.current.onDrag) handlers.current.onDrag(false);\n    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);\n    $9cc09df9fd7676be$var$draggingElements.splice($9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);\n    window.removeEventListener('mouseup', onMouseUp, false);\n    window.removeEventListener('mousemove', onMouseDragged, false);\n  };\n\n  let onMouseDown = e => {\n    const target = e.currentTarget; // If we're already handling dragging on a descendant with useDrag1D, then\n    // we don't want to handle the drag motion on this target as well.\n\n    if ($9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;\n    $9cc09df9fd7676be$var$draggingElements.push(target);\n    window.addEventListener('mousemove', onMouseDragged, false);\n    window.addEventListener('mouseup', onMouseUp, false);\n  };\n\n  let onMouseEnter = () => {\n    if (onHover) onHover(true);\n  };\n\n  let onMouseOut = () => {\n    if (onHover) onHover(false);\n  };\n\n  let onKeyDown = e => {\n    switch (e.key) {\n      case 'Left':\n      case 'ArrowLeft':\n        if (orientation === 'horizontal') {\n          e.preventDefault();\n          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();\n        }\n\n        break;\n\n      case 'Up':\n      case 'ArrowUp':\n        if (orientation === 'vertical') {\n          e.preventDefault();\n          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();\n        }\n\n        break;\n\n      case 'Right':\n      case 'ArrowRight':\n        if (orientation === 'horizontal') {\n          e.preventDefault();\n          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();\n        }\n\n        break;\n\n      case 'Down':\n      case 'ArrowDown':\n        if (orientation === 'vertical') {\n          e.preventDefault();\n          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();\n        }\n\n        break;\n\n      case 'Home':\n        e.preventDefault();\n        if (onDecrementToMin) onDecrementToMin();\n        break;\n\n      case 'End':\n        e.preventDefault();\n        if (onIncrementToMax) onIncrementToMax();\n        break;\n\n      case 'Enter':\n        e.preventDefault();\n        if (onCollapseToggle) onCollapseToggle();\n        break;\n    }\n  };\n\n  return {\n    onMouseDown: onMouseDown,\n    onMouseEnter: onMouseEnter,\n    onMouseOut: onMouseOut,\n    onKeyDown: onKeyDown\n  };\n}\n\nexport { $9cc09df9fd7676be$export$7bbed75feba39706 as useDrag1D };","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;AAYC;AAoBD;AACA;AACA;;AACA,MAAMA,yCAAkC,EAAxC;;AAOO,SAASC,yCAAT,CAAmBC,KAAnB,EAAwC;EAC7CC,QAAQC,IAAR,CAAa,gHAAb;EACA,IAAI;IAAAC,cAACA,YAAD;IAAaC,SAAEA,OAAf;IAAsBC,aAAEA,WAAxB;IAAmCC,SAAEA,OAArC;IAA4CC,QAAEA,MAA9C;IAAoDC,kBAAEA,gBAAtD;IAAsEC,aAAEA,WAAxE;IAAmFC,aAAEA,WAArF;IAAgGC,kBAAEA,gBAAlG;IAAkHC,kBAAEA,gBAApH;IAAoIC,kBAAEA;EAAtI,IAA0Jb,KAA9J;;EACA,IAAIc,cAAeC,CAAD,IAAOV,gBAAgB,YAAhB,GAA+BU,EAAEC,OAAjC,GAA2CD,EAAEE,OAAtE;;EACA,IAAIC,gBAAiBH,CAAD,IAAC;IACnB,IAAII,kBAAkB,+CAAUhB,aAAaiB,OAAvB,EAAgChB,OAAhC,EAAyCC,WAAzC,CAAtB;IACA,IAAIgB,cAAcP,YAAYC,CAAZ,CAAlB;IACA,IAAIO,aAAalB,UAAUe,kBAAkBE,WAA5B,GAA0CA,cAAcF,eAAzE;IACA,OAAOG,UAAP;EACF,CALA;;EAMA,IAAIC,WAAW,mBAAO,KAAP,CAAf;EACA,IAAIC,eAAe,mBAAO,CAAP,CAAnB,CAX6C,CAa7C;;EACA,IAAIC,WAAW,mBAAO;sBAACjB,gBAAD;YAAmBD;EAAnB,CAAP,CAAf;EACAkB,SAASL,OAAT,CAAiBb,MAAjB,GAA0BA,MAA1B;EACAkB,SAASL,OAAT,CAAiBZ,gBAAjB,GAAoCA,gBAApC;;EAEA,IAAIkB,iBAAkBX,CAAD,IAAC;IACpBA,EAAEY,cAAF;IACA,IAAIL,aAAaJ,cAAcH,CAAd,CAAjB;;IACA,IAAI,CAACQ,SAASH,OAAd,EAAuB;MACrBG,SAASH,OAAT,GAAmB,IAAnB;MACA,IAAIK,SAASL,OAAT,CAAiBb,MAArB,EACEkB,SAASL,OAAT,CAAiBb,MAAjB,CAAwB,IAAxB;MAEF,IAAIkB,SAASL,OAAT,CAAiBZ,gBAArB,EACEiB,SAASL,OAAT,CAAiBZ,gBAAjB,CAAkCc,UAAlC;IAEJ;;IACA,IAAIE,aAAaJ,OAAb,KAAyBE,UAA7B,EACE;IAEFE,aAAaJ,OAAb,GAAuBE,UAAvB;IACA,IAAId,gBAAJ,EACEA,iBAAiBc,UAAjB;EAEJ,CAnBA;;EAqBA,IAAIM,YAAab,CAAD,IAAC;IACf,MAAMc,SAASd,EAAEc,MAAjB;IACAN,SAASH,OAAT,GAAmB,KAAnB;IACA,IAAIE,aAAaJ,cAAcH,CAAd,CAAjB;IACA,IAAIU,SAASL,OAAT,CAAiBb,MAArB,EACEkB,SAASL,OAAT,CAAiBb,MAAjB,CAAwB,KAAxB;IAEF,IAAIkB,SAASL,OAAT,CAAiBZ,gBAArB,EACEiB,SAASL,OAAT,CAAiBZ,gBAAjB,CAAkCc,UAAlC;IAGFxB,uCAAiBgC,MAAjB,CAAwBhC,uCAAiBiC,OAAjB,CAAyBF,MAAzB,CAAxB,EAA0D,CAA1D;IACAG,OAAOC,mBAAP,CAA2B,SAA3B,EAAsCL,SAAtC,EAAiD,KAAjD;IACAI,OAAOC,mBAAP,CAA2B,WAA3B,EAAwCP,cAAxC,EAAwD,KAAxD;EACF,CAdA;;EAgBA,IAAIQ,cAAenB,CAAD,IAAC;IACjB,MAAMc,SAASd,EAAEoB,aAAjB,CADiB,CAEjB;IACA;;IACA,IAAIrC,uCAAiBsC,IAAjB,CAAsBC,OAAOR,OAAOS,QAAP,CAAgBD,GAAhB,CAA7B,CAAJ,EACE;IAEFvC,uCAAiByC,IAAjB,CAAsBV,MAAtB;IACAG,OAAOQ,gBAAP,CAAwB,WAAxB,EAAqCd,cAArC,EAAqD,KAArD;IACAM,OAAOQ,gBAAP,CAAwB,SAAxB,EAAmCZ,SAAnC,EAA8C,KAA9C;EACF,CAVA;;EAYA,IAAIa,eAAe;IACjB,IAAInC,OAAJ,EACEA,QAAQ,IAAR;EAEJ,CAJA;;EAMA,IAAIoC,aAAa;IACf,IAAIpC,OAAJ,EACEA,QAAQ,KAAR;EAEJ,CAJA;;EAMA,IAAIqC,YAAa5B,CAAD,IAAC;IACf,QAAQA,EAAE6B,GAAV;MACE,KAAK,MAAL;MACA,KAAK,WAAL;QACE,IAAIvC,gBAAgB,YAApB,EAAkC;UAChCU,EAAEY,cAAF;UACA,IAAIjB,eAAe,CAACN,OAApB,EACEM,cADF,KAEO,IAAID,eAAeL,OAAnB,EACLK;QAEJ;;QACA;;MACF,KAAK,IAAL;MACA,KAAK,SAAL;QACE,IAAIJ,gBAAgB,UAApB,EAAgC;UAC9BU,EAAEY,cAAF;UACA,IAAIjB,eAAe,CAACN,OAApB,EACEM,cADF,KAEO,IAAID,eAAeL,OAAnB,EACLK;QAEJ;;QACA;;MACF,KAAK,OAAL;MACA,KAAK,YAAL;QACE,IAAIJ,gBAAgB,YAApB,EAAkC;UAChCU,EAAEY,cAAF;UACA,IAAIlB,eAAe,CAACL,OAApB,EACEK,cADF,KAEO,IAAIC,eAAeN,OAAnB,EACLM;QAEJ;;QACA;;MACF,KAAK,MAAL;MACA,KAAK,WAAL;QACE,IAAIL,gBAAgB,UAApB,EAAgC;UAC9BU,EAAEY,cAAF;UACA,IAAIlB,eAAe,CAACL,OAApB,EACEK,cADF,KAEO,IAAIC,eAAeN,OAAnB,EACLM;QAEJ;;QACA;;MACF,KAAK,MAAL;QACEK,EAAEY,cAAF;QACA,IAAIf,gBAAJ,EACEA;QAEF;;MACF,KAAK,KAAL;QACEG,EAAEY,cAAF;QACA,IAAIhB,gBAAJ,EACEA;QAEF;;MACF,KAAK,OAAL;QACEI,EAAEY,cAAF;QACA,IAAId,gBAAJ,EACEA;QAEF;IA9DJ;EAgEF,CAjEA;;EAmEA,OAAO;iBAACqB,WAAD;kBAAcO,YAAd;gBAA4BC,UAA5B;eAAwCC;EAAxC,CAAP;AACF","names":["$9cc09df9fd7676be$var$draggingElements","$9cc09df9fd7676be$export$7bbed75feba39706","props","console","warn","containerRef","reverse","orientation","onHover","onDrag","onPositionChange","onIncrement","onDecrement","onIncrementToMax","onDecrementToMin","onCollapseToggle","getPosition","e","clientX","clientY","getNextOffset","containerOffset","current","mouseOffset","nextOffset","dragging","prevPosition","handlers","onMouseDragged","preventDefault","onMouseUp","target","splice","indexOf","window","removeEventListener","onMouseDown","currentTarget","some","elt","contains","push","addEventListener","onMouseEnter","onMouseOut","onKeyDown","key"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\useDrag1D.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n /* eslint-disable rulesdir/pure-render */\n\nimport {getOffset} from './getOffset';\nimport {Orientation} from '@react-types/shared';\nimport React, {HTMLAttributes, MutableRefObject, useRef} from 'react';\n\ninterface UseDrag1DProps {\n  containerRef: MutableRefObject<HTMLElement>,\n  reverse?: boolean,\n  orientation?: Orientation,\n  onHover?: (hovered: boolean) => void,\n  onDrag?: (dragging: boolean) => void,\n  onPositionChange?: (position: number) => void,\n  onIncrement?: () => void,\n  onDecrement?: () => void,\n  onIncrementToMax?: () => void,\n  onDecrementToMin?: () => void,\n  onCollapseToggle?: () => void\n}\n\n// Keep track of elements that we are currently handling dragging for via useDrag1D.\n// If there's an ancestor and a descendant both using useDrag1D(), and the user starts\n// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.\nconst draggingElements: HTMLElement[] = [];\n\n// created for splitview, this should be reusable for things like sliders/dials\n// It also handles keyboard events on the target allowing for increment/decrement by a given stepsize as well as minifying/maximizing and toggling between minified and previous size\n// It can also take a 'reverse' param to say if we should measure from the right/bottom instead of the top/left\n// It can also handle either a vertical or horizontal movement, but not both at the same time\n\nexport function useDrag1D(props: UseDrag1DProps): HTMLAttributes<HTMLElement> {\n  console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');\n  let {containerRef, reverse, orientation, onHover, onDrag, onPositionChange, onIncrement, onDecrement, onIncrementToMax, onDecrementToMin, onCollapseToggle} = props;\n  let getPosition = (e) => orientation === 'horizontal' ? e.clientX : e.clientY;\n  let getNextOffset = (e: MouseEvent) => {\n    let containerOffset = getOffset(containerRef.current, reverse, orientation);\n    let mouseOffset = getPosition(e);\n    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;\n    return nextOffset;\n  };\n  let dragging = useRef(false);\n  let prevPosition = useRef(0);\n\n  // Keep track of the current handlers in a ref so that the events can access them.\n  let handlers = useRef({onPositionChange, onDrag});\n  handlers.current.onDrag = onDrag;\n  handlers.current.onPositionChange = onPositionChange;\n\n  let onMouseDragged = (e: MouseEvent) => {\n    e.preventDefault();\n    let nextOffset = getNextOffset(e);\n    if (!dragging.current) {\n      dragging.current = true;\n      if (handlers.current.onDrag) {\n        handlers.current.onDrag(true);\n      }\n      if (handlers.current.onPositionChange) {\n        handlers.current.onPositionChange(nextOffset);\n      }\n    }\n    if (prevPosition.current === nextOffset) {\n      return;\n    }\n    prevPosition.current = nextOffset;\n    if (onPositionChange) {\n      onPositionChange(nextOffset);\n    }\n  };\n\n  let onMouseUp = (e: MouseEvent) => {\n    const target = e.target as HTMLElement;\n    dragging.current = false;\n    let nextOffset = getNextOffset(e);\n    if (handlers.current.onDrag) {\n      handlers.current.onDrag(false);\n    }\n    if (handlers.current.onPositionChange) {\n      handlers.current.onPositionChange(nextOffset);\n    }\n\n    draggingElements.splice(draggingElements.indexOf(target), 1);\n    window.removeEventListener('mouseup', onMouseUp, false);\n    window.removeEventListener('mousemove', onMouseDragged, false);\n  };\n\n  let onMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    const target = e.currentTarget;\n    // If we're already handling dragging on a descendant with useDrag1D, then\n    // we don't want to handle the drag motion on this target as well.\n    if (draggingElements.some(elt => target.contains(elt))) {\n      return;\n    }\n    draggingElements.push(target);\n    window.addEventListener('mousemove', onMouseDragged, false);\n    window.addEventListener('mouseup', onMouseUp, false);\n  };\n\n  let onMouseEnter = () => {\n    if (onHover) {\n      onHover(true);\n    }\n  };\n\n  let onMouseOut = () => {\n    if (onHover) {\n      onHover(false);\n    }\n  };\n\n  let onKeyDown = (e) => {\n    switch (e.key) {\n      case 'Left':\n      case 'ArrowLeft':\n        if (orientation === 'horizontal') {\n          e.preventDefault();\n          if (onDecrement && !reverse) {\n            onDecrement();\n          } else if (onIncrement && reverse) {\n            onIncrement();\n          }\n        }\n        break;\n      case 'Up':\n      case 'ArrowUp':\n        if (orientation === 'vertical') {\n          e.preventDefault();\n          if (onDecrement && !reverse) {\n            onDecrement();\n          } else if (onIncrement && reverse) {\n            onIncrement();\n          }\n        }\n        break;\n      case 'Right':\n      case 'ArrowRight':\n        if (orientation === 'horizontal') {\n          e.preventDefault();\n          if (onIncrement && !reverse) {\n            onIncrement();\n          } else if (onDecrement && reverse) {\n            onDecrement();\n          }\n        }\n        break;\n      case 'Down':\n      case 'ArrowDown':\n        if (orientation === 'vertical') {\n          e.preventDefault();\n          if (onIncrement && !reverse) {\n            onIncrement();\n          } else if (onDecrement && reverse) {\n            onDecrement();\n          }\n        }\n        break;\n      case 'Home':\n        e.preventDefault();\n        if (onDecrementToMin) {\n          onDecrementToMin();\n        }\n        break;\n      case 'End':\n        e.preventDefault();\n        if (onIncrementToMax) {\n          onIncrementToMax();\n        }\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (onCollapseToggle) {\n          onCollapseToggle();\n        }\n        break;\n    }\n  };\n\n  return {onMouseDown, onMouseEnter, onMouseOut, onKeyDown};\n}\n"]},"metadata":{},"sourceType":"module"}