{"ast":null,"code":"import { usePress as $f6c31cce2adf654f$export$45712eceda6fad21 } from \"./usePress.mjs\";\nimport { useFocusable as $f645667febf57a63$export$4c014de7c8940b4c } from \"./useFocusable.mjs\";\nimport { useObjectRef as $hhDyF$useObjectRef, getOwnerWindow as $hhDyF$getOwnerWindow, isFocusable as $hhDyF$isFocusable, mergeProps as $hhDyF$mergeProps, mergeRefs as $hhDyF$mergeRefs } from \"@react-aria/utils\";\nimport $hhDyF$react, { useEffect as $hhDyF$useEffect } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(0, $hhDyF$react).forwardRef((_ref, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref;\n  ref = (0, $hhDyF$useObjectRef)(ref);\n  let {\n    pressProps: pressProps\n  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({ ...props,\n    ref: ref\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $f645667febf57a63$export$4c014de7c8940b4c)(props, ref);\n  let child = (0, $hhDyF$react).Children.only(children);\n  (0, $hhDyF$useEffect)(() => {\n    if (process.env.NODE_ENV === 'production') return;\n    let el = ref.current;\n\n    if (!el || !(el instanceof (0, $hhDyF$getOwnerWindow)(el).Element)) {\n      console.error('<Pressable> child must forward its ref to a DOM element.');\n      return;\n    }\n\n    if (!props.isDisabled && !(0, $hhDyF$isFocusable)(el)) {\n      console.warn('<Pressable> child must be focusable. Please ensure the tabIndex prop is passed through.');\n      return;\n    }\n\n    if (el.localName !== 'button' && el.localName !== 'input' && el.localName !== 'select' && el.localName !== 'textarea' && el.localName !== 'a' && el.localName !== 'area' && el.localName !== 'summary') {\n      let role = el.getAttribute('role');\n      if (!role) console.warn('<Pressable> child must have an interactive ARIA role.');else if ( // https://w3c.github.io/aria/#widget_roles\n      role !== 'application' && role !== 'button' && role !== 'checkbox' && role !== 'combobox' && role !== 'gridcell' && role !== 'link' && role !== 'menuitem' && role !== 'menuitemcheckbox' && role !== 'menuitemradio' && role !== 'option' && role !== 'radio' && role !== 'searchbox' && role !== 'separator' && role !== 'slider' && role !== 'spinbutton' && role !== 'switch' && role !== 'tab' && role !== 'textbox' && role !== 'treeitem') console.warn(`<Pressable> child must have an interactive ARIA role. Got \"${role}\".`);\n    }\n  }, [ref, props.isDisabled]); // @ts-ignore\n\n  let childRef = parseInt((0, $hhDyF$react).version, 10) < 19 ? child.ref : child.props.ref;\n  return /*#__PURE__*/(0, $hhDyF$react).cloneElement(child, { ...(0, $hhDyF$mergeProps)(pressProps, focusableProps, child.props),\n    // @ts-ignore\n    ref: (0, $hhDyF$mergeRefs)(childRef, ref)\n  });\n});\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AAsBO,MAAMA,yDAAY,kBAAMC,UAAN,CAAiB,OAAuCC,GAAvC,KAAuC;EAAA,IAAtC;IAAAC,UAACA,QAAD;IAAW,GAAGC;EAAd,CAAsC;EAC/EF,MAAM,yBAAaA,GAAb,CAAN;EACA,IAAI;IAAAG,YAACA;EAAD,IAAe,+CAAS,EAAC,GAAGD,KAAJ;SAAWF;EAAX,CAAT,CAAnB;EACA,IAAI;IAAAI,gBAACA;EAAD,IAAmB,+CAAaF,KAAb,EAAoBF,GAApB,CAAvB;EACA,IAAIK,QAAQ,kBAAMC,QAAN,CAAeC,IAAf,CAAoBN,QAApB,CAAZ;EAEA,sBAAU;IACR,IAAIO,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EACE;IAGF,IAAIC,KAAKX,IAAIY,OAAb;;IACA,IAAI,CAACD,EAAD,IAAO,EAAEA,cAAc,2BAAeA,EAAf,EAAmBE,OAAnC,CAAX,EAAwD;MACtDC,QAAQC,KAAR,CAAc,0DAAd;MACA;IACF;;IAEA,IAAI,CAACb,MAAMc,UAAP,IAAqB,CAAC,wBAAYL,EAAZ,CAA1B,EAA2C;MACzCG,QAAQG,IAAR,CAAa,yFAAb;MACA;IACF;;IAEA,IACEN,GAAGO,SAAH,KAAiB,QAAjB,IACAP,GAAGO,SAAH,KAAiB,OADjB,IAEAP,GAAGO,SAAH,KAAiB,QAFjB,IAGAP,GAAGO,SAAH,KAAiB,UAHjB,IAIAP,GAAGO,SAAH,KAAiB,GAJjB,IAKAP,GAAGO,SAAH,KAAiB,MALjB,IAMAP,GAAGO,SAAH,KAAiB,SAPnB,EAQE;MACA,IAAIC,OAAOR,GAAGS,YAAH,CAAgB,MAAhB,CAAX;MACA,IAAI,CAACD,IAAL,EACEL,QAAQG,IAAR,CAAa,uDAAb,EADF,KAEO,KACL;MACAE,SAAS,aAAT,IACAA,SAAS,QADT,IAEAA,SAAS,UAFT,IAGAA,SAAS,UAHT,IAIAA,SAAS,UAJT,IAKAA,SAAS,MALT,IAMAA,SAAS,UANT,IAOAA,SAAS,kBAPT,IAQAA,SAAS,eART,IASAA,SAAS,QATT,IAUAA,SAAS,OAVT,IAWAA,SAAS,WAXT,IAYAA,SAAS,WAZT,IAaAA,SAAS,QAbT,IAcAA,SAAS,YAdT,IAeAA,SAAS,QAfT,IAgBAA,SAAS,KAhBT,IAiBAA,SAAS,SAjBT,IAkBAA,SAAS,UApBJ,EAsBLL,QAAQG,IAAR,CAAc,8DAA6DE,IAAK,IAAhF;IAEJ;EACF,CArDA,EAqDG,CAACnB,GAAD,EAAME,MAAMc,UAAZ,CArDH,EAN+E,CA6D/E;;EACA,IAAIK,WAAWC,SAAS,kBAAMC,OAAf,EAAwB,EAAxB,IAA8B,EAA9B,GAAmClB,MAAML,GAAzC,GAA+CK,MAAMH,KAAN,CAAYF,GAA1E;EAEA,oBAAO,kBAAMwB,YAAN,CACLnB,KADK,EAEL,EACE,GAAG,uBAAWF,UAAX,EAAuBC,cAAvB,EAAuCC,MAAMH,KAA7C,CADL;IAEE;IACAF,KAAK,sBAAUqB,QAAV,EAAoBrB,GAApB;EAHP,CAFK,CAAP;AAQF,CAxEyB,CAAlB","names":["$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","ref","children","props","pressProps","focusableProps","child","Children","only","process","env","NODE_ENV","el","current","Element","console","error","isDisabled","warn","localName","role","getAttribute","childRef","parseInt","version","cloneElement"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\Pressable.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {getOwnerWindow, isFocusable, mergeProps, mergeRefs, useObjectRef} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {ForwardedRef, ReactElement, useEffect} from 'react';\nimport {useFocusable} from './useFocusable';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<DOMAttributes, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: ForwardedRef<FocusableElement>) => {\n  ref = useObjectRef(ref);\n  let {pressProps} = usePress({...props, ref});\n  let {focusableProps} = useFocusable(props, ref);\n  let child = React.Children.only(children);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    let el = ref.current;\n    if (!el || !(el instanceof getOwnerWindow(el).Element)) {\n      console.error('<Pressable> child must forward its ref to a DOM element.');\n      return;\n    }\n\n    if (!props.isDisabled && !isFocusable(el)) {\n      console.warn('<Pressable> child must be focusable. Please ensure the tabIndex prop is passed through.');\n      return;\n    }\n\n    if (\n      el.localName !== 'button' &&\n      el.localName !== 'input' &&\n      el.localName !== 'select' &&\n      el.localName !== 'textarea' &&\n      el.localName !== 'a' &&\n      el.localName !== 'area' &&\n      el.localName !== 'summary'\n    ) {\n      let role = el.getAttribute('role');\n      if (!role) {\n        console.warn('<Pressable> child must have an interactive ARIA role.');\n      } else if (\n        // https://w3c.github.io/aria/#widget_roles\n        role !== 'application' &&\n        role !== 'button' &&\n        role !== 'checkbox' &&\n        role !== 'combobox' &&\n        role !== 'gridcell' &&\n        role !== 'link' &&\n        role !== 'menuitem' &&\n        role !== 'menuitemcheckbox' &&\n        role !== 'menuitemradio' &&\n        role !== 'option' &&\n        role !== 'radio' &&\n        role !== 'searchbox' &&\n        role !== 'separator' &&\n        role !== 'slider' &&\n        role !== 'spinbutton' &&\n        role !== 'switch' &&\n        role !== 'tab' &&\n        role !== 'textbox' &&\n        role !== 'treeitem'\n      ) {\n        console.warn(`<Pressable> child must have an interactive ARIA role. Got \"${role}\".`);\n      }\n    }\n  }, [ref, props.isDisabled]);\n\n  // @ts-ignore\n  let childRef = parseInt(React.version, 10) < 19 ? child.ref : child.props.ref;\n\n  return React.cloneElement(\n    child,\n    {\n      ...mergeProps(pressProps, focusableProps, child.props),\n      // @ts-ignore\n      ref: mergeRefs(childRef, ref)\n    }\n  );\n});\n"]},"metadata":{},"sourceType":"module"}