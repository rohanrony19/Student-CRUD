{"ast":null,"code":"/*!\n* tabbable 6.2.0\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\n\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n\n  if (lookUp === void 0) {\n    lookUp = true;\n  } // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n\n\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true'; // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\n\n\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2; // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n\n\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\n\n\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\n\n\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      } // iterate over shadow content if possible\n\n\n      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element); // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n\n  return candidates;\n};\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\n\n\nvar hasTabIndex = function hasTabIndex(node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\n\n\nvar getTabIndex = function getTabIndex(node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\n\n\nvar getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {\n  var tabIndex = getTabIndex(node);\n\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n\n  return tabIndex;\n};\n\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\n\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\n\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\n\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || getRootNode(node);\n\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n\n  var radioSet;\n\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n}; // determines if a node is ultimately attached to the window's document\n\n\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot; // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n\n\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host; // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n\n  var attached = false;\n\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD; // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n\n\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n\n  return attached;\n};\n\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      width = _node$getBoundingClie.width,\n      height = _node$getBoundingClie.height;\n\n  return width === 0 && height === 0;\n};\n\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n      getShadowRoot = _ref.getShadowRoot; // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    } // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n\n\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    } // else, fallback to 'none' mode and consider the node visible\n\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  } // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n\n\n  return false;\n}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\n\n\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>\n\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found\n\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        } // the disabled <fieldset> containing `node` has no <legend>\n\n\n        return true;\n      }\n\n      parentNode = parentNode.parentElement;\n    }\n  } // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n\n\n  return false;\n};\n\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  } // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n\n\n  return false;\n};\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\n\n\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getSortOrderTabIndex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\n\nvar tabbable = function tabbable(container, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n\n  return sortByOrder(candidates);\n};\n\nvar focusable = function focusable(container, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n\n  return candidates;\n};\n\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\n\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, getTabIndex, isFocusable, isTabbable, tabbable };","map":{"version":3,"mappings":"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","names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","_element$getRootNode","ownerDocument","isInert","node","lookUp","inertAtt","_node$getAttribute","getAttribute","inert","result","parentNode","isContentEditable","attValue","_node$getAttribute2","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","call","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","content","children","nestedCandidates","flatten","push","scopeParent","validCandidate","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","hasTabIndex","isNaN","parseInt","getTabIndex","Error","tabIndex","test","getSortOrderTabIndex","isScope","sortOrderedTabbables","a","b","documentOrder","isInput","isHiddenInput","type","isDetailsWithSummary","r","some","child","getCheckedRadio","nodes","form","i","checked","isTabbableRadio","name","radioScope","queryRadios","radioSet","window","CSS","escape","err","console","error","message","isRadio","isNonTabbableRadio","isNodeAttached","nodeRoot","nodeRootHost","_nodeRoot","host","attached","_nodeRootHost","_nodeRootHost$ownerDo","contains","_node$ownerDocument","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isZeroArea","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","isDirectSummary","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","getClientRects","isDisabledFromFieldset","disabled","item","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","candidateTabindex","sort","reduce","acc","sortable","concat","tabbable","container","bind","focusable","isTabbable","focusableCandidateSelector","isFocusable"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\tabbable\\src\\index.js"],"sourcesContent":["// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nconst candidateSelectors = [\n  'input:not([inert])',\n  'select:not([inert])',\n  'textarea:not([inert])',\n  'a[href]:not([inert])',\n  'button:not([inert])',\n  '[tabindex]:not(slot):not([inert])',\n  'audio[controls]:not([inert])',\n  'video[controls]:not([inert])',\n  '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n  'details>summary:first-of-type:not([inert])',\n  'details:not([inert])',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element?.getRootNode?.()\n    : (element) => element?.ownerDocument;\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nconst isInert = function (node, lookUp = true) {\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  const inertAtt = node?.getAttribute?.('inert');\n  const inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  const result = inert || (lookUp && node && isInert(node.parentNode)); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nconst isContentEditable = function (node) {\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  const attValue = node?.getAttribute?.('contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      const validShadowRoot =\n        !isInert(shadowRoot, false) &&\n        (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nconst hasTabIndex = function (node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nconst getTabIndex = function (node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if (\n      (/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        isContentEditable(node)) &&\n      !hasTabIndex(node)\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nconst getSortOrderTabIndex = function (node, isScope) {\n  const tabIndex = getTabIndex(node);\n\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n\n  return tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  let nodeRoot = node && getRootNode(node);\n  let nodeRootHost = nodeRoot?.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  let attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    attached = !!(\n      nodeRootHost?.ownerDocument?.contains(nodeRootHost) ||\n      node?.ownerDocument?.contains(node)\n    );\n\n    while (!attached && nodeRootHost) {\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = nodeRoot?.host;\n      attached = !!nodeRootHost?.ownerDocument?.contains(nodeRootHost);\n    }\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabIndex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getSortOrderTabIndex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorTabbable.bind(null, options),\n        flatten: false,\n        getShadowRoot: options.getShadowRoot,\n        shadowRootFilter: isValidShadowRootTabbable,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorFocusable.bind(null, options),\n        flatten: true,\n        getShadowRoot: options.getShadowRoot,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable, getTabIndex };\n"]},"metadata":{},"sourceType":"module"}