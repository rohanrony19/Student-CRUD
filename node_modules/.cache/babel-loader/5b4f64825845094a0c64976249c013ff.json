{"ast":null,"code":"import * as React from \"react\";\nimport { flushSync } from \"react-dom\";\nimport { Virtualizer, elementScroll, observeElementOffset, observeElementRect, windowScroll, observeWindowOffset, observeWindowRect } from \"@tanstack/virtual-core\";\nexport * from \"@tanstack/virtual-core\";\nconst useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? React.useLayoutEffect : React.useEffect;\n\nfunction useVirtualizerBase(options) {\n  const rerender = React.useReducer(() => ({}), {})[1];\n  const resolvedOptions = { ...options,\n    onChange: (instance2, sync) => {\n      var _a;\n\n      if (sync) {\n        flushSync(rerender);\n      } else {\n        rerender();\n      }\n\n      (_a = options.onChange) == null ? void 0 : _a.call(options, instance2, sync);\n    }\n  };\n  const [instance] = React.useState(() => new Virtualizer(resolvedOptions));\n  instance.setOptions(resolvedOptions);\n  useIsomorphicLayoutEffect(() => {\n    return instance._didMount();\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate();\n  });\n  return instance;\n}\n\nfunction useVirtualizer(options) {\n  return useVirtualizerBase({\n    observeElementRect,\n    observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options\n  });\n}\n\nfunction useWindowVirtualizer(options) {\n  return useVirtualizerBase({\n    getScrollElement: () => typeof document !== \"undefined\" ? window : null,\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => typeof document !== \"undefined\" ? window.scrollY : 0,\n    ...options\n  });\n}\n\nexport { useVirtualizer, useWindowVirtualizer };","map":{"version":3,"mappings":";;;;AAeA,MAAMA,4BACJ,OAAOC,QAAP,KAAoB,WAApB,GAAkCC,MAAMC,eAAxC,GAA0DD,MAAME,SADlE;;AAGA,SAASC,kBAAT,CAIEC,OAJF,EAK6C;EACrC,iBAAWJ,MAAMK,UAAN,CAAiB,OAAO,EAAP,CAAjB,EAA6B,EAA7B,EAAiC,CAAjC,CAAX;EAEN,MAAMC,kBAAoE,EACxE,GAAGF,OADqE;IAExEG,UAAU,CAACC,SAAD,EAAWC,IAAX,KAAoB;;;MAC5B,IAAIA,IAAJ,EAAU;QACRC,UAAUC,QAAV;MAAkB,CADpB,MAEO;QACIA;MAAA;;MAEH,4DAAWH,SAAX,EAAqBC,IAArB;IAAyB;EARqC,CAA1E;EAYM,OAACD,QAAD,IAAaR,MAAMY,QAAN,CACjB,MAAM,IAAIC,WAAJ,CAA8CP,eAA9C,CADW,CAAb;EAINE,SAASM,UAAT,CAAoBR,eAApB;EAEAR,0BAA0B,MAAM;IAC9B,OAAOU,SAASO,SAAT,EAAP;EACF,CAFA,EAEG,EAFH;EAIAjB,0BAA0B,MAAM;IAC9B,OAAOU,SAASQ,WAAT,EAAP;EACD,CAFD;EAIO;AACT;;AAEO,SAASC,cAAT,CAILb,OAJK,EAQsC;EAC3C,OAAOD,mBAAiD;IACtDe,kBADsD;IAEtDC,oBAFsD;IAGtDC,YAAYC,aAH0C;IAItD,GAAGjB;EAJmD,CAAjD,CAAP;AAMF;;AAEO,SAASkB,oBAAT,CACLlB,OADK,EAQ8B;EACnC,OAAOD,mBAAyC;IAC9CoB,kBAAkB,MAAO,OAAOxB,QAAP,KAAoB,WAApB,GAAkCyB,MAAlC,GAA2C,IADtB;IAE9CN,oBAAoBO,iBAF0B;IAG9CN,sBAAsBO,mBAHwB;IAI9CN,YAAYO,YAJkC;IAK9CC,eAAe,MAAO,OAAO7B,QAAP,KAAoB,WAApB,GAAkCyB,OAAOK,OAAzC,GAAmD,CAL3B;IAM9C,GAAGzB;EAN2C,CAAzC,CAAP;AAQF","names":["useIsomorphicLayoutEffect","document","React","useLayoutEffect","useEffect","useVirtualizerBase","options","useReducer","resolvedOptions","onChange","instance","sync","flushSync","rerender","useState","Virtualizer","setOptions","_didMount","_willUpdate","useVirtualizer","observeElementRect","observeElementOffset","scrollToFn","elementScroll","useWindowVirtualizer","getScrollElement","window","observeWindowRect","observeWindowOffset","windowScroll","initialOffset","scrollY"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@tanstack\\react-virtual\\src\\index.tsx"],"sourcesContent":["import * as React from 'react'\nimport { flushSync } from 'react-dom'\nimport {\n  Virtualizer,\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  windowScroll,\n} from '@tanstack/virtual-core'\nimport type { PartialKeys, VirtualizerOptions } from '@tanstack/virtual-core'\n\nexport * from '@tanstack/virtual-core'\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance, sync) => {\n      if (sync) {\n        flushSync(rerender)\n      } else {\n        rerender()\n      }\n      options.onChange?.(instance, sync)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => (typeof document !== 'undefined' ? window.scrollY : 0),\n    ...options,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}