{"ast":null,"code":"import { useRef as $lPAwt$useRef, useCallback as $lPAwt$useCallback, useEffect as $lPAwt$useEffect } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $03deb23ff14920c4$export$4eaf04e54aa8eed6() {\n  let globalListeners = (0, $lPAwt$useRef)(new Map());\n  let addGlobalListener = (0, $lPAwt$useCallback)((eventTarget, type, listener, options) => {\n    // Make sure we remove the listener after it is called with the `once` option.\n    let fn = (options === null || options === void 0 ? void 0 : options.once) ? function () {\n      globalListeners.current.delete(listener);\n      listener(...arguments);\n    } : listener;\n    globalListeners.current.set(listener, {\n      type: type,\n      eventTarget: eventTarget,\n      fn: fn,\n      options: options\n    });\n    eventTarget.addEventListener(type, fn, options);\n  }, []);\n  let removeGlobalListener = (0, $lPAwt$useCallback)((eventTarget, type, listener, options) => {\n    var _globalListeners_current_get;\n\n    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;\n    eventTarget.removeEventListener(type, fn, options);\n    globalListeners.current.delete(listener);\n  }, []);\n  let removeAllGlobalListeners = (0, $lPAwt$useCallback)(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [removeGlobalListener]);\n  (0, $lPAwt$useEffect)(() => {\n    return removeAllGlobalListeners;\n  }, [removeAllGlobalListeners]);\n  return {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  };\n}\n\nexport { $03deb23ff14920c4$export$4eaf04e54aa8eed6 as useGlobalListeners };","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;AAuBO,SAASA,yCAAT,GAAS;EACd,IAAIC,kBAAkB,mBAAO,IAAIC,GAAJ,EAAP,CAAtB;EACA,IAAIC,oBAAoB,wBAAY,CAACC,WAAD,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,OAA9B,KAA8B;IAChE;IACA,IAAIC,KAAK,2DAASC,IAAT,IAAgB,YAAI;MAC3BR,gBAAgBS,OAAhB,CAAwBC,MAAxB,CAA+BL,QAA/B;MACAA;IACF,CAHS,GAGLA,QAHJ;IAIAL,gBAAgBS,OAAhB,CAAwBE,GAAxB,CAA4BN,QAA5B,EAAsC;YAACD,IAAD;mBAAOD,WAAP;UAAoBI,EAApB;eAAwBD;IAAxB,CAAtC;IACAH,YAAYS,gBAAZ,CAA6BR,IAA7B,EAAmCG,EAAnC,EAAuCD,OAAvC;EACF,CARwB,EAQrB,EARqB,CAAxB;EASA,IAAIO,uBAAuB,wBAAY,CAACV,WAAD,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,OAA9B,KAA8B;QAC1DQ;;IAAT,IAAIP,KAAK,iDAAgBE,OAAhB,CAAwBM,GAAxB,CAA4BV,QAA5B,OAA4B,IAA5B,oFAAuCE,EAAvC,KAA6CF,QAAtD;IACAF,YAAYa,mBAAZ,CAAgCZ,IAAhC,EAAsCG,EAAtC,EAA0CD,OAA1C;IACAN,gBAAgBS,OAAhB,CAAwBC,MAAxB,CAA+BL,QAA/B;EACF,CAJ2B,EAIxB,EAJwB,CAA3B;EAKA,IAAIY,2BAA2B,wBAAY;IACzCjB,gBAAgBS,OAAhB,CAAwBS,OAAxB,CAAgC,CAACC,KAAD,EAAQC,GAAR,KAAQ;MACtCP,qBAAqBM,MAAMhB,WAA3B,EAAwCgB,MAAMf,IAA9C,EAAoDgB,GAApD,EAAyDD,MAAMb,OAA/D;IACF,CAFA;EAGF,CAJ+B,EAI5B,CAACO,oBAAD,CAJ4B,CAA/B;EAOA,sBAAU;IACR,OAAOI,wBAAP;EACF,CAFA,EAEG,CAACA,wBAAD,CAFH;EAIA,OAAO;uBAACf,iBAAD;0BAAoBW,oBAApB;8BAA0CI;EAA1C,CAAP;AACF","names":["$03deb23ff14920c4$export$4eaf04e54aa8eed6","globalListeners","Map","addGlobalListener","eventTarget","type","listener","options","fn","once","current","delete","set","addEventListener","removeGlobalListener","_globalListeners_current_get","get","removeEventListener","removeAllGlobalListeners","forEach","value","key"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\useGlobalListeners.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef} from 'react';\n\ninterface GlobalListeners {\n  addGlobalListener<K extends keyof WindowEventMap>(el: Window, type: K, listener: (this: Document, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void,\n  addGlobalListener<K extends keyof DocumentEventMap>(el: EventTarget, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void,\n  addGlobalListener(el: EventTarget, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void,\n  removeGlobalListener<K extends keyof DocumentEventMap>(el: EventTarget, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void,\n  removeGlobalListener(el: EventTarget, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void,\n  removeAllGlobalListeners(): void\n}\n\nexport function useGlobalListeners(): GlobalListeners {\n  let globalListeners = useRef(new Map());\n  let addGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    // Make sure we remove the listener after it is called with the `once` option.\n    let fn = options?.once ? (...args) => {\n      globalListeners.current.delete(listener);\n      listener(...args);\n    } : listener;\n    globalListeners.current.set(listener, {type, eventTarget, fn, options});\n    eventTarget.addEventListener(type, fn, options);\n  }, []);\n  let removeGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    let fn = globalListeners.current.get(listener)?.fn || listener;\n    eventTarget.removeEventListener(type, fn, options);\n    globalListeners.current.delete(listener);\n  }, []);\n  let removeAllGlobalListeners = useCallback(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [removeGlobalListener]);\n\n   \n  useEffect(() => {\n    return removeAllGlobalListeners;\n  }, [removeAllGlobalListeners]);\n\n  return {addGlobalListener, removeGlobalListener, removeAllGlobalListeners};\n}\n"]},"metadata":{},"sourceType":"module"}