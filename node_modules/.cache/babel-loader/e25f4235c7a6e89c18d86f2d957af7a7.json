{"ast":null,"code":"import { disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295 } from \"./textSelection.mjs\";\nimport { useRef as $5GN7j$useRef, useMemo as $5GN7j$useMemo } from \"react\";\nimport { useGlobalListeners as $5GN7j$useGlobalListeners, useEffectEvent as $5GN7j$useEffectEvent } from \"@react-aria/utils\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = (0, $5GN7j$useRef)({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $5GN7j$useGlobalListeners)();\n  let move = (0, $5GN7j$useEffectEvent)((originalEvent, pointerType, deltaX, deltaY) => {\n    if (deltaX === 0 && deltaY === 0) return;\n\n    if (!state.current.didMove) {\n      state.current.didMove = true;\n      onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n        type: 'movestart',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n\n    onMove === null || onMove === void 0 ? void 0 : onMove({\n      type: 'move',\n      pointerType: pointerType,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n  let end = (0, $5GN7j$useEffectEvent)((originalEvent, pointerType) => {\n    (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();\n    if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n      type: 'moveend',\n      pointerType: pointerType,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n  let moveProps = (0, $5GN7j$useMemo)(() => {\n    let moveProps = {};\n\n    let start = () => {\n      (0, $14c0b72509d70225$export$16a4697467175487)();\n      state.current.didMove = false;\n    };\n\n    if (typeof PointerEvent === 'undefined' && process.env.NODE_ENV === 'test') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;\n\n          move(e, 'mouse', e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref => {\n          let {\n            identifier: identifier\n          } = _ref;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;\n\n          move(e, 'touch', pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref2 => {\n          let {\n            identifier: identifier\n          } = _ref2;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          var _state_current_lastPosition, _state_current_lastPosition1;\n\n          let pointerType = e.pointerType || 'mouse';\n\n          var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY; // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n\n\n          move(e, pointerType, e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, addGlobalListener, removeGlobalListener, move, end]);\n  return {\n    moveProps: moveProps\n  };\n}\n\nexport { $e8a7022cf87cba2a$export$36da96379f79f245 as useMove };","map":{"version":3,"mappings":"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","names":["$e8a7022cf87cba2a$export$36da96379f79f245","props","onMoveStart","onMove","onMoveEnd","state","didMove","lastPosition","id","addGlobalListener","removeGlobalListener","move","originalEvent","pointerType","deltaX","deltaY","current","type","shiftKey","metaKey","ctrlKey","altKey","end","moveProps","start","PointerEvent","process","env","NODE_ENV","onMouseMove","e","button","_state_current_lastPosition","_state_current_lastPosition1","_state_current_lastPosition_pageX","_state_current_lastPosition_pageY","pageX","pageY","onMouseUp","window","onMouseDown","stopPropagation","preventDefault","onTouchMove","touch","changedTouches","findIndex","identifier","onTouchEnd","onTouchStart","length","onPointerMove","pointerId","onPointerUp","onPointerDown","triggerKeyboardMove","onKeyDown","key"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useMove.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useEffectEvent, useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let move = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    if (!state.current.didMove) {\n      state.current.didMove = true;\n      onMoveStart?.({\n        type: 'movestart',\n        pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n    onMove?.({\n      type: 'move',\n      pointerType,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n\n  let end = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    restoreTextSelection();\n    if (state.current.didMove) {\n      onMoveEnd?.({\n        type: 'moveend',\n        pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n  });\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n\n    if (typeof PointerEvent === 'undefined' && process.env.NODE_ENV === 'test') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - (state.current.lastPosition?.pageX ?? 0), e.pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - (state.current.lastPosition?.pageX ?? 0), pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - (state.current.lastPosition?.pageX ?? 0), e.pageY - (state.current.lastPosition?.pageY ?? 0));\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, addGlobalListener, removeGlobalListener, move, end]);\n\n  return {moveProps};\n}\n"]},"metadata":{},"sourceType":"module"}