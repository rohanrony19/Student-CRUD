{"ast":null,"code":"import { isShadowRoot as $431fbd86ca7dc216$export$af51f0f06c0f328a } from \"./domHelpers.mjs\";\nimport { shadowDOM as $lcSu5$shadowDOM } from \"@react-stately/flags\"; // Source: https://github.com/microsoft/tabster/blob/a89fc5d7e332d48f68d03b1ca6e344489d1c3898/src/Shadowdomize/DOMFunctions.ts#L16\n\nfunction $d4ee10de306f2510$export$4282f70798064fe0(node, otherNode) {\n  if (!(0, $lcSu5$shadowDOM)()) return otherNode && node ? node.contains(otherNode) : false;\n  if (!node || !otherNode) return false;\n  let currentNode = otherNode;\n\n  while (currentNode !== null) {\n    if (currentNode === node) return true;\n    if (currentNode.tagName === 'SLOT' && currentNode.assignedSlot) // Element is slotted\n      currentNode = currentNode.assignedSlot.parentNode;else if ((0, $431fbd86ca7dc216$export$af51f0f06c0f328a)(currentNode)) // Element is in shadow root\n      currentNode = currentNode.host;else currentNode = currentNode.parentNode;\n  }\n\n  return false;\n}\n\nconst $d4ee10de306f2510$export$cd4e5573fbe2b576 = function () {\n  let doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\n  var _activeElement_shadowRoot;\n\n  if (!(0, $lcSu5$shadowDOM)()) return doc.activeElement;\n  let activeElement = doc.activeElement;\n\n  while (activeElement && 'shadowRoot' in activeElement && ((_activeElement_shadowRoot = activeElement.shadowRoot) === null || _activeElement_shadowRoot === void 0 ? void 0 : _activeElement_shadowRoot.activeElement)) activeElement = activeElement.shadowRoot.activeElement;\n\n  return activeElement;\n};\n\nfunction $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {\n  if ((0, $lcSu5$shadowDOM)() && event.target.shadowRoot) {\n    if (event.composedPath) return event.composedPath()[0];\n  }\n\n  return event.target;\n}\n\nexport { $d4ee10de306f2510$export$4282f70798064fe0 as nodeContains, $d4ee10de306f2510$export$cd4e5573fbe2b576 as getActiveElement, $d4ee10de306f2510$export$e58f029f0fbfdb29 as getEventTarget };","map":{"version":3,"mappings":";sEAAA;;AAQO,SAASA,yCAAT,CACLC,IADK,EAELC,SAFK,EAE6B;EAElC,IAAI,CAAC,uBAAL,EACE,OAAOA,aAAaD,IAAb,GAAoBA,KAAKE,QAAL,CAAcD,SAAd,CAApB,GAA+C,KAAtD;EAGF,IAAI,CAACD,IAAD,IAAS,CAACC,SAAd,EACE,OAAO,KAAP;EAGF,IAAIE,cAAqDF,SAAzD;;EAEA,OAAOE,gBAAgB,IAAvB,EAA6B;IAC3B,IAAIA,gBAAgBH,IAApB,EACE,OAAO,IAAP;IAGF,IAAIG,WAAC,CAAgCC,OAAjC,KAA6C,MAA7C,IACFD,WAAC,CAAgCE,YADnC,EAEE;MACAF,cAAcA,WAAC,CAAgCE,YAAjC,CAA+CC,UAA7D,CAHF,KAIO,IAAI,+CAAaH,WAAb,CAAJ,EACL;MACAA,cAAcA,YAAYI,IAA1B,CAFK,KAILJ,cAAcA,YAAYG,UAA1B;EAEJ;;EAEA,OAAO,KAAP;AACF;;AAKO,MAAME,4CAAmB,YAAyB;EAAA,IAAxBC,GAAwB,uEAARC,QAAQ;;MAOvDC;;EANA,IAAI,CAAC,uBAAL,EACE,OAAOF,IAAIG,aAAX;EAEF,IAAIA,gBAAgCH,IAAIG,aAAxC;;EAEA,OAAOA,iBAAiB,gBAAgBA,aAAjC,KAAiC,CACxCD,0CAAcE,UAD0B,MAChB,IADgB,IACxCF,oCADwC,GACxC,MADwC,GACxCA,0BAA0BC,aADnB,CAAP,EAEEA,gBAAgBA,cAAcC,UAAd,CAAyBD,aAAzC;;EAGF,OAAOA,aAAP;AACF,CAZO;;AAiBA,SAASE,yCAAT,CAAyCC,KAAzC,EAAiD;EACtD,IAAI,2BAAeA,KAAC,CAAMC,MAAP,CAA8BH,UAAjD,EAA6D;IAC3D,IAAIE,MAAME,YAAV,EACE,OAAOF,MAAME,YAAN,GAAqB,CAArB,CAAP;EAEJ;;EACA,OAAOF,MAAMC,MAAb;AACF","names":["$d4ee10de306f2510$export$4282f70798064fe0","node","otherNode","contains","currentNode","tagName","assignedSlot","parentNode","host","$d4ee10de306f2510$export$cd4e5573fbe2b576","doc","document","_activeElement_shadowRoot","activeElement","shadowRoot","$d4ee10de306f2510$export$e58f029f0fbfdb29","event","target","composedPath"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\shadowdom\\DOMFunctions.ts"],"sourcesContent":["// Source: https://github.com/microsoft/tabster/blob/a89fc5d7e332d48f68d03b1ca6e344489d1c3898/src/Shadowdomize/DOMFunctions.ts#L16\n\nimport {isShadowRoot} from '../domHelpers';\nimport {shadowDOM} from '@react-stately/flags';\n\n/**\n * ShadowDOM safe version of Node.contains.\n */\nexport function nodeContains(\n  node: Node | null | undefined,\n  otherNode: Node | null | undefined\n): boolean {\n  if (!shadowDOM()) {\n    return otherNode && node ? node.contains(otherNode) : false;\n  }\n\n  if (!node || !otherNode) {\n    return false;\n  }\n\n  let currentNode: HTMLElement | Node | null | undefined = otherNode;\n\n  while (currentNode !== null) {\n    if (currentNode === node) {\n      return true;\n    }\n\n    if ((currentNode as HTMLSlotElement).tagName === 'SLOT' &&\n      (currentNode as HTMLSlotElement).assignedSlot) {\n      // Element is slotted\n      currentNode = (currentNode as HTMLSlotElement).assignedSlot!.parentNode;\n    } else if (isShadowRoot(currentNode)) {\n      // Element is in shadow root\n      currentNode = currentNode.host;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return false;\n}\n\n/**\n * ShadowDOM safe version of document.activeElement.\n */\nexport const getActiveElement = (doc: Document = document): Element | null => {\n  if (!shadowDOM()) {\n    return doc.activeElement;\n  }\n  let activeElement: Element | null = doc.activeElement;\n\n  while (activeElement && 'shadowRoot' in activeElement &&\n  activeElement.shadowRoot?.activeElement) {\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n\n  return activeElement;\n};\n\n/**\n * ShadowDOM safe version of event.target.\n */\nexport function getEventTarget<T extends Event>(event: T): Element {\n  if (shadowDOM() && (event.target as HTMLElement).shadowRoot) {\n    if (event.composedPath) {\n      return event.composedPath()[0] as Element;\n    }\n  }\n  return event.target as Element;\n}\n"]},"metadata":{},"sourceType":"module"}