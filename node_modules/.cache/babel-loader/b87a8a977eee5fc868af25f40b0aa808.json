{"ast":null,"code":"import { createSyntheticEvent as $8a9cb279dc87e130$export$525bc4921d56d4a, setEventTarget as $8a9cb279dc87e130$export$c2b7abe5d61ec696, useSyntheticBlurEvent as $8a9cb279dc87e130$export$715c682d09d639cc } from \"./utils.mjs\";\nimport { useRef as $3b9Q0$useRef, useCallback as $3b9Q0$useCallback } from \"react\";\nimport { useGlobalListeners as $3b9Q0$useGlobalListeners, getOwnerDocument as $3b9Q0$getOwnerDocument, getActiveElement as $3b9Q0$getActiveElement, getEventTarget as $3b9Q0$getEventTarget, nodeContains as $3b9Q0$nodeContains } from \"@react-aria/utils\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = (0, $3b9Q0$useRef)({\n    isFocusWithin: false\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $3b9Q0$useGlobalListeners)();\n  let onBlur = (0, $3b9Q0$useCallback)(e => {\n    // Ignore events bubbling through portals.\n    if (!e.currentTarget.contains(e.target)) return; // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      removeAllGlobalListeners();\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state, removeAllGlobalListeners]);\n  let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  let onFocus = (0, $3b9Q0$useCallback)(e => {\n    // Ignore events bubbling through portals.\n    if (!e.currentTarget.contains(e.target)) return; // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n\n    const ownerDocument = (0, $3b9Q0$getOwnerDocument)(e.target);\n    const activeElement = (0, $3b9Q0$getActiveElement)(ownerDocument);\n\n    if (!state.current.isFocusWithin && activeElement === (0, $3b9Q0$getEventTarget)(e.nativeEvent)) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e); // Browsers don't fire blur events when elements are removed from the DOM.\n      // However, if a focus event occurs outside the element we're tracking, we\n      // can manually fire onBlur.\n\n      let currentTarget = e.currentTarget;\n      addGlobalListener(ownerDocument, 'focus', e => {\n        if (state.current.isFocusWithin && !(0, $3b9Q0$nodeContains)(currentTarget, e.target)) {\n          let nativeEvent = new ownerDocument.defaultView.FocusEvent('blur', {\n            relatedTarget: e.target\n          });\n          (0, $8a9cb279dc87e130$export$c2b7abe5d61ec696)(nativeEvent, currentTarget);\n          let event = (0, $8a9cb279dc87e130$export$525bc4921d56d4a)(nativeEvent);\n          onBlur(event);\n        }\n      }, {\n        capture: true\n      });\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus, addGlobalListener, onBlur]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      // These cannot be null, that would conflict in mergeProps\n      onFocus: undefined,\n      onBlur: undefined\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n\nexport { $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;AAYA;AACA;AACA;AACA;;AA0BO,SAASA,yCAAT,CAAwBC,KAAxB,EAA+C;EACpD,IAAI;IAAAC,YACFA,UADE;IACQC,cACVA,YAFE;IAEUC,eACZA,aAHE;IAGWC,qBACbA;EAJE,IAKAJ,KALJ;EAMA,IAAIK,QAAQ,mBAAO;IACjBC,eAAe;EADE,CAAP,CAAZ;EAIA,IAAI;IAAAC,mBAACA,iBAAD;IAAkBC,0BAAEA;EAApB,IAAgD,gCAApD;EAEA,IAAIC,SAAS,wBAAaC,CAAD,IAAC;IACxB;IACA,IAAI,CAACA,EAAEC,aAAF,CAAgBC,QAAhB,CAAyBF,EAAEG,MAA3B,CAAL,EACE,OAHsB,CAMxB;IACA;IACA;;IACA,IAAIR,MAAMS,OAAN,CAAcR,aAAd,IAA+B,CAACI,CAAC,CAAEC,aAAH,CAA6BC,QAA7B,CAAsCF,EAAEK,aAAxC,CAApC,EAAuG;MACrGV,MAAMS,OAAN,CAAcR,aAAd,GAA8B,KAA9B;MACAE;MAEA,IAAIN,YAAJ,EACEA,aAAaQ,CAAb;MAGF,IAAIN,mBAAJ,EACEA,oBAAoB,KAApB;IAEJ;EACF,CArBa,EAqBV,CAACF,YAAD,EAAeE,mBAAf,EAAoCC,KAApC,EAA2CG,wBAA3C,CArBU,CAAb;EAuBA,IAAIQ,mBAAmB,+CAAsBP,MAAtB,CAAvB;EACA,IAAIQ,UAAU,wBAAaP,CAAD,IAAC;IACzB;IACA,IAAI,CAACA,EAAEC,aAAF,CAAgBC,QAAhB,CAAyBF,EAAEG,MAA3B,CAAL,EACE,OAHuB,CAMzB;IACA;;IACA,MAAMK,gBAAgB,6BAAiBR,EAAEG,MAAnB,CAAtB;IACA,MAAMM,gBAAgB,6BAAiBD,aAAjB,CAAtB;;IACA,IAAI,CAACb,MAAMS,OAAN,CAAcR,aAAf,IAAgCa,kBAAkB,2BAAeT,EAAEU,WAAjB,CAAtD,EAAqF;MACnF,IAAIjB,aAAJ,EACEA,cAAcO,CAAd;MAGF,IAAIN,mBAAJ,EACEA,oBAAoB,IAApB;MAGFC,MAAMS,OAAN,CAAcR,aAAd,GAA8B,IAA9B;MACAU,iBAAiBN,CAAjB,EAVmF,CAYnF;MACA;MACA;;MACA,IAAIC,gBAAgBD,EAAEC,aAAtB;MACAJ,kBAAkBW,aAAlB,EAAiC,OAAjC,EAA0CR;QACxC,IAAIL,MAAMS,OAAN,CAAcR,aAAd,IAA+B,CAAC,yBAAaK,aAAb,EAA4BD,EAAEG,MAA9B,CAApC,EAAsF;UACpF,IAAIO,cAAc,IAAIF,cAAcG,WAAd,CAA2BC,UAA/B,CAA0C,MAA1C,EAAkD;YAACP,eAAeL,EAAEG;UAAlB,CAAlD,CAAlB;UACA,+CAAeO,WAAf,EAA4BT,aAA5B;UACA,IAAIY,QAAQ,8CAAiCH,WAAjC,CAAZ;UACAX,OAAOc,KAAP;QACF;MACF,CAPA,EAOG;QAACC,SAAS;MAAV,CAPH;IAQF;EACF,CAnCc,EAmCX,CAACrB,aAAD,EAAgBC,mBAAhB,EAAqCY,gBAArC,EAAuDT,iBAAvD,EAA0EE,MAA1E,CAnCW,CAAd;EAqCA,IAAIR,UAAJ,EACE,OAAO;IACLwB,kBAAkB;MAChB;MACAR,SAASS,SAFO;MAGhBjB,QAAQiB;IAHQ;EADb,CAAP;EASF,OAAO;IACLD,kBAAkB;eAChBR,OADgB;cAEhBR;IAFgB;EADb,CAAP;AAMF","names":["$9ab94262bd0047c7$export$420e68273165f4ec","props","isDisabled","onBlurWithin","onFocusWithin","onFocusWithinChange","state","isFocusWithin","addGlobalListener","removeAllGlobalListeners","onBlur","e","currentTarget","contains","target","current","relatedTarget","onSyntheticFocus","onFocus","ownerDocument","activeElement","nativeEvent","defaultView","FocusEvent","event","capture","focusWithinProps","undefined"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocusWithin.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {createSyntheticEvent, setEventTarget, useSyntheticBlurEvent} from './utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {FocusEvent, useCallback, useRef} from 'react';\nimport {getActiveElement, getEventTarget, getOwnerDocument, nodeContains, useGlobalListeners} from '@react-aria/utils';\n\nexport interface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\nexport interface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // Ignore events bubbling through portals.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n      removeAllGlobalListeners();\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state, removeAllGlobalListeners]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    // Ignore events bubbling through portals.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    const ownerDocument = getOwnerDocument(e.target);\n    const activeElement = getActiveElement(ownerDocument);\n    if (!state.current.isFocusWithin && activeElement === getEventTarget(e.nativeEvent)) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n\n      // Browsers don't fire blur events when elements are removed from the DOM.\n      // However, if a focus event occurs outside the element we're tracking, we\n      // can manually fire onBlur.\n      let currentTarget = e.currentTarget;\n      addGlobalListener(ownerDocument, 'focus', e => {\n        if (state.current.isFocusWithin && !nodeContains(currentTarget, e.target as Element)) {\n          let nativeEvent = new ownerDocument.defaultView!.FocusEvent('blur', {relatedTarget: e.target});\n          setEventTarget(nativeEvent, currentTarget);\n          let event = createSyntheticEvent<FocusEvent>(nativeEvent);\n          onBlur(event);\n        }\n      }, {capture: true});\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus, addGlobalListener, onBlur]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        // These cannot be null, that would conflict in mergeProps\n        onFocus: undefined,\n        onBlur: undefined\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}