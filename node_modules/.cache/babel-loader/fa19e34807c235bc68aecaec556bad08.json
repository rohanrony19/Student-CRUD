{"ast":null,"code":"import { isElementVisible as $645f2e67b85a24c9$export$e989c0fffaa6b27a } from \"./isElementVisible.mjs\";\nimport { useLayoutEffect as $cgawC$useLayoutEffect, getActiveElement as $cgawC$getActiveElement, getOwnerDocument as $cgawC$getOwnerDocument, getEventTarget as $cgawC$getEventTarget, isAndroid as $cgawC$isAndroid, isChrome as $cgawC$isChrome, isTabbable as $cgawC$isTabbable, isFocusable as $cgawC$isFocusable, createShadowTreeWalker as $cgawC$createShadowTreeWalker } from \"@react-aria/utils\";\nimport { getInteractionModality as $cgawC$getInteractionModality, focusSafely as $cgawC$focusSafely } from \"@react-aria/interactions\";\nimport $cgawC$react, { useRef as $cgawC$useRef, useContext as $cgawC$useContext, useMemo as $cgawC$useMemo, useEffect as $cgawC$useEffect } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $cgawC$react).createContext(null);\nconst $9bf71ea28793e738$var$RESTORE_FOCUS_EVENT = 'react-aria-focus-scope-restore';\nlet $9bf71ea28793e738$var$activeScope = null;\n\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $cgawC$useRef)(null);\n  let endRef = (0, $cgawC$useRef)(null);\n  let scopeRef = (0, $cgawC$useRef)([]);\n  let {\n    parentNode: parentNode\n  } = (0, $cgawC$useContext)($9bf71ea28793e738$var$FocusContext) || {}; // Create a tree node here so we can add children to it even before it is added to the tree.\n\n  let node = (0, $cgawC$useMemo)(() => new $9bf71ea28793e738$var$TreeNode({\n    scopeRef: scopeRef\n  }), [scopeRef]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n\n    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n      if (activeNode) parent = activeNode;\n    } // Add the node to the parent, and to the tree.\n\n\n    parent.addChild(node);\n    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n  }, [node, parentNode]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (node) node.contain = !!contain;\n  }, [contain]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    var _startRef_current; // Find all rendered nodes between the sentinels and add them to the scope.\n\n\n    let node = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;\n    let nodes = [];\n\n    let stopPropagation = e => e.stopPropagation();\n\n    while (node && node !== endRef.current) {\n      nodes.push(node); // Stop custom restore focus event from propagating to parent focus scopes.\n\n      node.addEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n    return () => {\n      for (let node of nodes) node.removeEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);\n    };\n  }, [children]);\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus); // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n\n  (0, $cgawC$useEffect)(() => {\n    const activeElement = (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined));\n    let scope = null;\n\n    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n\n      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n    }\n  }, [scopeRef]); // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n\n  (0, $cgawC$useLayoutEffect)(() => {\n    return () => {\n      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;\n\n      var _focusScopeTree_getTreeNode_parent_scopeRef; // Scope may have been re-parented.\n\n\n      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;\n      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n  let focusManager = (0, $cgawC$useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n  let value = (0, $cgawC$useMemo)(() => ({\n    focusManager: focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n  return /*#__PURE__*/(0, $cgawC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $cgawC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $cgawC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\n\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n\n  return (_useContext = (0, $cgawC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\n\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n\n      var _scope_;\n\n      let node = from || (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : undefined));\n      let sentinel = scope[0].previousElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n\n      var _scope_;\n\n      let node = from || (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : undefined));\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n\n  };\n}\n\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\n\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $cgawC$useRef)(undefined);\n  let raf = (0, $cgawC$useRef)(undefined);\n  (0, $cgawC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n\n      return;\n    }\n\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined); // Handle the Tab key to contain focus within the scope\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;\n      let focusedElement = (0, $cgawC$getActiveElement)(ownerDocument);\n      let scope = scopeRef.current;\n      if (!scope || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: true\n      }, scope);\n      if (!focusedElement) return;\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $cgawC$getEventTarget)(e), scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = (0, $cgawC$getEventTarget)(e);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope((0, $cgawC$getEventTarget)(e), scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = (0, $cgawC$getEventTarget)(e);\n    };\n\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) cancelAnimationFrame(raf.current);\n      raf.current = requestAnimationFrame(() => {\n        // Patches infinite focus coersion loop for Android Talkback where the user isn't able to move the virtual cursor\n        // if within a containing focus scope. Bug filed against Chrome: https://issuetracker.google.com/issues/384844019.\n        // Note that this means focus can leave focus containing modals due to this, but it is isolated to Chrome Talkback.\n        let modality = (0, $cgawC$getInteractionModality)();\n        let shouldSkipFocusRestore = (modality === 'virtual' || modality === null) && (0, $cgawC$isAndroid)() && (0, $cgawC$isChrome)(); // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n\n        let activeElement = (0, $cgawC$getActiveElement)(ownerDocument);\n\n        if (!shouldSkipFocusRestore && activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n          let target = (0, $cgawC$getEventTarget)(e);\n\n          if (target && target.isConnected) {\n            var _focusedNode_current;\n\n            focusedNode.current = target;\n            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]); // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n\n  (0, $cgawC$useLayoutEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\n\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\n\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  if (!element) return false;\n  if (!scope) return false;\n  return scope.some(node => node.contains(element));\n}\n\nfunction $9bf71ea28793e738$var$isElementInChildScope(element) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) return true; // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n\n  return false;\n}\n\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\n\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n\n  return false;\n}\n\nfunction $9bf71ea28793e738$var$focusElement(element) {\n  let scroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (element != null && !scroll) try {\n    (0, $cgawC$focusSafely)(element);\n  } catch {// ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch {// ignore\n  }\n}\n\nfunction $9bf71ea28793e738$var$getFirstInScope(scope) {\n  let tabbable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let sentinel = scope[0].previousElementSibling;\n  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode(); // If the scope does not contain a tabbable element, use the first focusable element.\n\n  if (tabbable && !nextNode) {\n    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  return nextNode;\n}\n\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope) {\n  let tabbable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  $9bf71ea28793e738$var$focusElement($9bf71ea28793e738$var$getFirstInScope(scope, tabbable));\n}\n\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $cgawC$react).useRef(autoFocus);\n  (0, $cgawC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!$9bf71ea28793e738$var$isElementInScope((0, $cgawC$getActiveElement)(ownerDocument), $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $cgawC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n\n    let onFocus = e => {\n      let target = (0, $cgawC$getEventTarget)(e);\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\n\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = (0, $cgawC$useRef)(typeof document !== 'undefined' ? (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined)) : null); // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n\n  (0, $cgawC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) return;\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $cgawC$getActiveElement)(ownerDocument), scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return; // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;\n      let focusedElement = ownerDocument.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInChildScope(focusedElement, scopeRef) || !$9bf71ea28793e738$var$shouldRestoreFocus(scopeRef)) return;\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore; // Create a DOM tree walker that matches all tabbable elements\n\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {\n        tabbable: true\n      }); // Find the next tabbable element after the currently focused element\n\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!nodeToRestore || !nodeToRestore.isConnected || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      } // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n\n\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n\n    if (!contain) ownerDocument.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      if (!contain) ownerDocument.removeEventListener('keydown', onKeyDown, true);\n    };\n  }, [scopeRef, restoreFocus, contain]); // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n\n  (0, $cgawC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (!treeNode) return;\n\n    var _nodeToRestoreRef_current;\n\n    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : undefined;\n    return () => {\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore; // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n\n      let activeElement = (0, $cgawC$getActiveElement)(ownerDocument);\n\n      if (restoreFocus && nodeToRestore && (activeElement && $9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef) || activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                $9bf71ea28793e738$var$restoreFocusToElement(treeNode.nodeToRestore);\n                return;\n              }\n\n              treeNode = treeNode.parent;\n            } // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n\n\n            treeNode = clonedTree.getTreeNode(scopeRef);\n\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                let node = $9bf71ea28793e738$var$getFirstInScope(treeNode.scopeRef.current, true);\n                $9bf71ea28793e738$var$restoreFocusToElement(node);\n                return;\n              }\n\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\n\nfunction $9bf71ea28793e738$var$restoreFocusToElement(node) {\n  // Dispatch a custom event that parent elements can intercept to customize focus restoration.\n  // For example, virtualized collection components reuse DOM elements, so the original element\n  // might still exist in the DOM but representing a different item.\n  if (node.dispatchEvent(new CustomEvent($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, {\n    bubbles: true,\n    cancelable: true\n  }))) $9bf71ea28793e738$var$focusElement(node);\n}\n\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let filter = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? (0, $cgawC$isTabbable) : (0, $cgawC$isFocusable); // Ensure that root is an Element or fall back appropriately\n\n  let rootElement = (root === null || root === void 0 ? void 0 : root.nodeType) === Node.ELEMENT_NODE ? root : null; // Determine the document to use\n\n  let doc = (0, $cgawC$getOwnerDocument)(rootElement); // Create a TreeWalker, ensuring the root is an Element or Document\n\n  let walker = (0, $cgawC$createShadowTreeWalker)(doc, root || doc, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from; // Skip nodes inside the starting node.\n\n\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (filter(node) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\n\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)(root));\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $cgawC$getActiveElement)((0, $cgawC$getOwnerDocument)(root));\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next !== null && next !== void 0 ? next : null;\n      }\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = $9bf71ea28793e738$var$last(walker);\n        if (!lastNode) // couldn't wrap\n          return null;\n        previousNode = lastNode;\n      }\n\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode !== null && previousNode !== void 0 ? previousNode : null;\n    },\n\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next !== null && next !== void 0 ? next : null;\n    }\n\n  };\n}\n\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next = undefined;\n  let last;\n\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n\n  return next;\n}\n\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    if (!parentNode) return;\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n\n  addNode(node) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    if (!node) return;\n    let parentNode = node.parent; // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n\n    let children = node.children;\n\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) children.forEach(child => parentNode && parentNode.addChild(child));\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  } // Pre Order Depth First\n\n\n  *traverse() {\n    let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root;\n    if (node.scopeRef != null) yield node;\n    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n\n  clone() {\n    var _node_parent;\n\n    let newTree = new $9bf71ea28793e738$var$Tree();\n\n    var _node_parent_scopeRef;\n\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);\n\n    return newTree;\n  }\n\n  constructor() {\n    this.fastMap = new Map();\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n\n}\n\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.add(node);\n    node.parent = this;\n  }\n\n  removeChild(node) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n\n  constructor(props) {\n    this.children = new Set();\n    this.contain = false;\n    this.scopeRef = props.scopeRef;\n  }\n\n}\n\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$d06fae2ee68b101e as focusScopeTree, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager };","map":{"version":3,"mappings":"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","names":["$9bf71ea28793e738$var$FocusContext","createContext","$9bf71ea28793e738$var$RESTORE_FOCUS_EVENT","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$export$20e40289641fbbb6","props","children","contain","restoreFocus","autoFocus","startRef","endRef","scopeRef","parentNode","node","$9bf71ea28793e738$var$TreeNode","parent","$9bf71ea28793e738$export$d06fae2ee68b101e","root","getTreeNode","$9bf71ea28793e738$var$isAncestorScope","activeNode","addChild","addNode","_startRef_current","current","nextSibling","nodes","stopPropagation","e","push","addEventListener","removeEventListener","$9bf71ea28793e738$var$useActiveScopeTracker","$9bf71ea28793e738$var$useFocusContainment","$9bf71ea28793e738$var$useRestoreFocus","$9bf71ea28793e738$var$useAutoFocus","activeElement","undefined","scope","$9bf71ea28793e738$var$isElementInScope","traverse","_focusScopeTree_getTreeNode_parent","_focusScopeTree_getTreeNode_parent_scopeRef","parentScope","removeTreeNode","focusManager","$9bf71ea28793e738$var$createFocusManagerForScope","value","Provider","hidden","ref","$9bf71ea28793e738$export$10c5169755ce7bd7","_useContext","focusNext","opts","from","tabbable","wrap","accept","_scope_","sentinel","previousElementSibling","scopeRoot","$9bf71ea28793e738$var$getScopeRoot","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","currentNode","nextNode","$9bf71ea28793e738$var$focusElement","focusPrevious","length","nextElementSibling","previousNode","focusFirst","focusLast","parentElement","$9bf71ea28793e738$var$shouldContainFocus","focusedNode","raf","cancelAnimationFrame","ownerDocument","onKeyDown","key","altKey","ctrlKey","metaKey","isComposing","focusedElement","nextElement","shiftKey","preventDefault","onFocus","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","modality","shouldSkipFocusRestore","target","isConnected","_focusedNode_current","forEach","element","$9bf71ea28793e738$var$isElementInAnyScope","some","contains","Element","closest","s","$9bf71ea28793e738$export$1258395f99bf9cbf","ancestor","_focusScopeTree_getTreeNode","scroll","$9bf71ea28793e738$var$getFirstInScope","autoFocusRef","useRef","restore","$9bf71ea28793e738$var$shouldRestoreFocus","nodeToRestore","nodeToRestoreRef","document","treeNode","body","blur","_nodeToRestoreRef_current","clonedTree","clone","$9bf71ea28793e738$var$restoreFocusToElement","dispatchEvent","CustomEvent","bubbles","cancelable","filter","rootElement","nodeType","Node","ELEMENT_NODE","doc","NodeFilter","SHOW_ELEMENT","acceptNode","_opts_from","FILTER_REJECT","FILTER_ACCEPT","FILTER_SKIP","$9bf71ea28793e738$export$c5251b9e124bf29","defaultOptions","next","$9bf71ea28793e738$var$last","lastNode","last","lastChild","$9bf71ea28793e738$var$Tree","fastMap","size","data","get","addTreeNode","set","removeChild","child","delete","_node_parent","newTree","_node_parent_scopeRef","constructor","Map","add","Set"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\focus\\dist\\packages\\@react-aria\\focus\\src\\FocusScope.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  createShadowTreeWalker,\n  getActiveElement,\n  getEventTarget,\n  getOwnerDocument,\n  isAndroid,\n  isChrome,\n  isFocusable,\n  isTabbable,\n  ShadowTreeWalker,\n  useLayoutEffect\n} from '@react-aria/utils';\nimport {FocusableElement, RefObject} from '@react-types/shared';\nimport {focusSafely, getInteractionModality} from '@react-aria/interactions';\nimport {isElementVisible} from './isElementVisible';\nimport React, {JSX, ReactNode, useContext, useEffect, useMemo, useRef} from 'react';\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement | null\n}\n\ntype ScopeRef = RefObject<Element[] | null> | null;\ninterface IFocusContext {\n  focusManager: FocusManager,\n  parentNode: TreeNode | null\n}\n\nconst FocusContext = React.createContext<IFocusContext | null>(null);\nconst RESTORE_FOCUS_EVENT = 'react-aria-focus-scope-restore';\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps): JSX.Element {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>(null);\n  let endRef = useRef<HTMLSpanElement>(null);\n  let scopeRef = useRef<Element[]>([]);\n  let {parentNode} = useContext(FocusContext) || {};\n\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = useMemo(() => new TreeNode({scopeRef}), [scopeRef]);\n\n  useLayoutEffect(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || focusScopeTree.root;\n    if (focusScopeTree.getTreeNode(parent.scopeRef) && activeScope && !isAncestorScope(activeScope, parent.scopeRef)) {\n      let activeNode = focusScopeTree.getTreeNode(activeScope);\n      if (activeNode) {\n        parent = activeNode;\n      }\n    }\n\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    focusScopeTree.addNode(node);\n  }, [node, parentNode]);\n\n  useLayoutEffect(() => {\n    let node = focusScopeTree.getTreeNode(scopeRef);\n    if (node) {\n      node.contain = !!contain;\n    }\n  }, [contain]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current?.nextSibling!;\n    let nodes: Element[] = [];\n    let stopPropagation = e => e.stopPropagation();\n    while (node && node !== endRef.current) {\n      nodes.push(node as Element);\n      // Stop custom restore focus event from propagating to parent focus scopes.\n      node.addEventListener(RESTORE_FOCUS_EVENT, stopPropagation);\n      node = node.nextSibling as Element;\n    }\n\n    scopeRef.current = nodes;\n\n    return () => {\n      for (let node of nodes) {\n        node.removeEventListener(RESTORE_FOCUS_EVENT, stopPropagation);\n      }\n    };\n  }, [children]);\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  useEffect(() => {\n    const activeElement = getActiveElement(getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined));\n    let scope: TreeNode | null = null;\n\n    if (isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of focusScopeTree.traverse()) {\n        if (node.scopeRef && isElementInScope(activeElement, node.scopeRef.current)) {\n          scope = node;\n        }\n      }\n\n      if (scope === focusScopeTree.getTreeNode(scopeRef)) {\n        activeScope = scope.scopeRef;\n      }\n    }\n  }, [scopeRef]);\n\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  useLayoutEffect(() => {\n    return () => {\n      // Scope may have been re-parented.\n      let parentScope = focusScopeTree.getTreeNode(scopeRef)?.parent?.scopeRef ?? null;\n\n      if (\n        (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n        (!parentScope || focusScopeTree.getTreeNode(parentScope))\n      ) {\n        activeScope = parentScope;\n      }\n      focusScopeTree.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n\n  let focusManager = useMemo(() => createFocusManagerForScope(scopeRef), []);\n  let value = useMemo(() => ({\n    focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n\n  return (\n    <FocusContext.Provider value={value}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager | undefined {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[] | null>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getActiveElement(getOwnerDocument(scope[0] ?? undefined))!;\n      let sentinel = scope[0].previousElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getActiveElement(getOwnerDocument(scope[0] ?? undefined))!;\n      let sentinel = scope[scope.length - 1].nextElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node  : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling!;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling!;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement!;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[] | null>, contain?: boolean) {\n  let focusedNode = useRef<FocusableElement>(undefined);\n\n  let raf = useRef<ReturnType<typeof requestAnimationFrame>>(undefined);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef) || e.isComposing) {\n        return;\n      }\n\n      let focusedElement = getActiveElement(ownerDocument);\n      let scope = scopeRef.current;\n      if (!scope || !isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable: true}, scope);\n      if (!focusedElement) {\n        return;\n      }\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling! : scope[0].previousElementSibling!;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus: EventListener = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(getEventTarget(e) as Element, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = getEventTarget(e) as FocusableElement;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(getEventTarget(e) as Element, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope && activeScope.current) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = getEventTarget(e) as FocusableElement;\n      }\n    };\n\n    let onBlur: EventListener = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n      raf.current = requestAnimationFrame(() => {\n        // Patches infinite focus coersion loop for Android Talkback where the user isn't able to move the virtual cursor\n        // if within a containing focus scope. Bug filed against Chrome: https://issuetracker.google.com/issues/384844019.\n        // Note that this means focus can leave focus containing modals due to this, but it is isolated to Chrome Talkback.\n        let modality = getInteractionModality();\n        let shouldSkipFocusRestore = (modality === 'virtual' || modality === null) && isAndroid() && isChrome();\n\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        let activeElement = getActiveElement(ownerDocument);\n        if (!shouldSkipFocusRestore && activeElement && shouldContainFocus(scopeRef) && !isElementInChildScope(activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          let target = getEventTarget(e) as FocusableElement;\n          if (target && target.isConnected) {\n            focusedNode.current = target;\n            focusedNode.current?.focus();\n          } else if (activeScope.current) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope?.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope?.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n\n  useLayoutEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element?: Element | null, scope?: Element[] | null) {\n  if (!element) {\n    return false;\n  }\n  if (!scope) {\n    return false;\n  }\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) {\n    return true;\n  }\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (s && isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element): boolean {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch {\n      // ignore\n    }\n  }\n}\n\nfunction getFirstInScope(scope: Element[], tabbable = true) {\n  let sentinel = scope[0].previousElementSibling!;\n  let scopeRoot = getScopeRoot(scope);\n  let walker = getFocusableTreeWalker(scopeRoot, {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = getScopeRoot(scope);\n    walker = getFocusableTreeWalker(scopeRoot, {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  return nextNode as FocusableElement;\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  focusElement(getFirstInScope(scope, tabbable));\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[] | null>, autoFocus?: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!isElementInScope(getActiveElement(ownerDocument), activeScope.current) && scopeRef.current) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[] | null>, restore?: boolean, contain?: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    let onFocus = (e) => {\n      let target = getEventTarget(e) as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[] | null>, restoreFocus?: boolean, contain?: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? getActiveElement(getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined)) as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) &&\n        isElementInScope(getActiveElement(ownerDocument), scopeRef.current)\n      ) {\n        activeScope = scopeRef;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef) || e.isComposing) {\n        return;\n      }\n\n      let focusedElement = ownerDocument.activeElement as FocusableElement;\n      if (!isElementInChildScope(focusedElement, scopeRef) || !shouldRestoreFocus(scopeRef)) {\n        return;\n      }\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(ownerDocument.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!nodeToRestore || !nodeToRestore.isConnected || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInChildScope(nextElement, scopeRef)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInChildScope(nextElement, scopeRef));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      ownerDocument.addEventListener('keydown', onKeyDown as EventListener, true);\n    }\n\n    return () => {\n      if (!contain) {\n        ownerDocument.removeEventListener('keydown', onKeyDown as EventListener, true);\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    let treeNode = focusScopeTree.getTreeNode(scopeRef);\n    if (!treeNode) {\n      return;\n    }\n    treeNode.nodeToRestore = nodeToRestoreRef.current ?? undefined;\n    return () => {\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      let activeElement = getActiveElement(ownerDocument);\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          ((activeElement && isElementInChildScope(activeElement, scopeRef)) || (activeElement === ownerDocument.body && shouldRestoreFocus(scopeRef)))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                restoreFocusToElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                let node = getFirstInScope(treeNode.scopeRef.current, true);\n                restoreFocusToElement(node);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\n\nfunction restoreFocusToElement(node: FocusableElement) {\n  // Dispatch a custom event that parent elements can intercept to customize focus restoration.\n  // For example, virtualized collection components reuse DOM elements, so the original element\n  // might still exist in the DOM but representing a different item.\n  if (node.dispatchEvent(new CustomEvent(RESTORE_FOCUS_EVENT, {bubbles: true, cancelable: true}))) {\n    focusElement(node);\n  }\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]): ShadowTreeWalker | TreeWalker {\n  let filter = opts?.tabbable ? isTabbable : isFocusable;\n\n  // Ensure that root is an Element or fall back appropriately\n  let rootElement = root?.nodeType === Node.ELEMENT_NODE ? (root as Element) : null;\n\n  // Determine the document to use\n  let doc = getOwnerDocument(rootElement);\n\n  // Create a TreeWalker, ensuring the root is an Element or Document\n  let walker = createShadowTreeWalker(\n    doc,\n    root || doc,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if (filter(node as Element)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element | null>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getActiveElement(getOwnerDocument(root));\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getActiveElement(getOwnerDocument(root));\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next ?? null;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = last(walker);\n        if (!lastNode) {\n          // couldn't wrap\n          return null;\n        }\n        previousNode = lastNode;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode ?? null;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next ?? null;\n    }\n  };\n}\n\nfunction last(walker: ShadowTreeWalker | TreeWalker) {\n  let next: FocusableElement | undefined = undefined;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    if (!parentNode) {\n      return;\n    }\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  addNode(node: TreeNode) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    if (!node) {\n      return;\n    }\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) {\n        children.forEach(child => parentNode && parentNode.addChild(child));\n      }\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.size > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent?.scopeRef ?? null, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore?: FocusableElement;\n  public parent?: TreeNode;\n  public children: Set<TreeNode> = new Set();\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n"]},"metadata":{},"sourceType":"module"}