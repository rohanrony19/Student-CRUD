{"ast":null,"code":"/**\n   * react-table\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\nimport * as React from 'react';\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core'; //\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\n\nfunction flexRender(Comp, props) {\n  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : Comp;\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n}\n\nfunction isClassComponent(component) {\n  return typeof component === 'function' && (() => {\n    const proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  })();\n}\n\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\n\nfunction useReactTable(options) {\n  // Compose in the generic options to the user options\n  const resolvedOptions = {\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    ...options\n  }; // Create a new table and store it in state\n\n  const [tableRef] = React.useState(() => ({\n    current: createTable(resolvedOptions)\n  })); // By default, manage table state here using the table's initial state\n\n  const [state, setState] = React.useState(() => tableRef.current.initialState); // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n\n  tableRef.current.setOptions(prev => ({ ...prev,\n    ...options,\n    state: { ...state,\n      ...options.state\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater);\n      options.onStateChange == null || options.onStateChange(updater);\n    }\n  }));\n  return tableRef.current;\n}\n\nexport { flexRender, useReactTable };","map":{"version":3,"mappings":";;;;;;;;;;;;sCAYA;;AAEA;AACA;AACA;;AACO,SAASA,UAAT,CACLC,IADK,EAELC,KAFK,EAGgC;EACrC,OAAO,CAACD,IAAD,GAAQ,IAAR,GAAeE,gBAAgB,CAASF,IAAT,CAAhBE,GAA8B,aAClDC,oBAACH,IAADG,EAAUF,KAAVE,CADoBD,GAGpBF,IAHF;AAKF;;AAEA,SAASE,gBAAT,CACEE,SADF,EAE4C;EAC1C,OACEC,gBAAgB,CAACD,SAAD,CAAhBC,IACA,OAAOD,SAAP,KAAqB,UADrBC,IAEAC,iBAAiB,CAACF,SAAD,CAHnB;AAKF;;AAEA,SAASC,gBAAT,CAA0BD,SAA1B,EAA0C;EACxC,OACE,OAAOA,SAAP,KAAqB,UAArB,IACA,CAAC,MAAM;IACL,MAAMG,KAAK,GAAGC,MAAM,CAACC,cAAPD,CAAsBJ,SAAtBI,CAAd;IACA,OAAOD,KAAK,CAACG,SAANH,IAAmBA,KAAK,CAACG,SAANH,CAAgBL,gBAA1C;EACD,CAHD,GAFF;AAOF;;AAEA,SAASI,iBAAT,CAA2BF,SAA3B,EAA2C;EACzC,OACE,OAAOA,SAAP,KAAqB,QAArB,IACA,OAAOA,SAAS,CAACO,QAAjB,KAA8B,QAD9B,IAEA,CAAC,YAAD,EAAe,mBAAf,EAAoCC,QAApC,CAA6CR,SAAS,CAACO,QAAVP,CAAmBS,WAAhE,CAHF;AAKF;;AAEO,SAASC,aAAT,CACLC,OADK,EAEL;EACA;EACA,MAAMC,eAA4C,GAAG;IACnDC,KAAK,EAAE,EAD4C;IACxC;IACXC,aAAa,EAAEA,MAAM,CAAE,CAF4B;IAE1B;IACzBC,mBAAmB,EAAE,IAH8B;IAInD,GAAGJ;EAJgD,CAArD,CAFA,CASA;;EACA,MAAM,CAACK,QAAD,IAAajB,KAAK,CAACkB,QAANlB,CAAe,OAAO;IACvCmB,OAAO,EAAEC,WAAW,CAAQP,eAAR;EADmB,CAAP,CAAfb,CAAnB,CAVA,CAcA;;EACA,MAAM,CAACc,KAAD,EAAQO,QAAR,IAAoBrB,KAAK,CAACkB,QAANlB,CAAe,MAAMiB,QAAQ,CAACE,OAATF,CAAiBK,YAAtCtB,CAA1B,CAfA,CAiBA;EACA;;EACAiB,QAAQ,CAACE,OAATF,CAAiBM,UAAjBN,CAA4BO,IAAI,KAAK,EACnC,GAAGA,IADgC;IAEnC,GAAGZ,OAFgC;IAGnCE,KAAK,EAAE,EACL,GAAGA,KADE;MAEL,GAAGF,OAAO,CAACE;IAFN,CAH4B;IAOnC;IACA;IACAC,aAAa,EAAEU,OAAO,IAAI;MACxBJ,QAAQ,CAACI,OAAD,CAARJ;MACAT,OAAO,CAACG,aAARH,mBAAO,CAACG,aAARH,CAAwBa,OAAxBb;IACF;EAZmC,CAAL,CAAhCK;EAeA,OAAOA,QAAQ,CAACE,OAAhB;AACF","names":["flexRender","Comp","props","isReactComponent","React","component","isClassComponent","isExoticComponent","proto","Object","getPrototypeOf","prototype","$$typeof","includes","description","useReactTable","options","resolvedOptions","state","onStateChange","renderFallbackValue","tableRef","useState","current","createTable","setState","initialState","setOptions","prev","updater"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@tanstack\\react-table\\src\\index.tsx"],"sourcesContent":["import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | React.JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"]},"metadata":{},"sourceType":"module"}