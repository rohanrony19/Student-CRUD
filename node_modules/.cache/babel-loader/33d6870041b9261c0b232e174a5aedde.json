{"ast":null,"code":"import { useLayoutEffect as $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c } from \"./useLayoutEffect.mjs\";\nimport { useValueEffect as $1dbecbe27a04f9af$export$14d238f342723f25 } from \"./useValueEffect.mjs\";\nimport { useState as $eKkEp$useState, useRef as $eKkEp$useRef, useEffect as $eKkEp$useEffect, useCallback as $eKkEp$useCallback } from \"react\";\nimport { useSSRSafeId as $eKkEp$useSSRSafeId } from \"@react-aria/ssr\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// copied from SSRProvider.tsx to reduce exports, if needed again, consider sharing\n\nlet $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\nlet $bdb11010cef70236$export$d41a04c74483c6ef = new Map(); // This allows us to clean up the idsUpdaterMap when the id is no longer used.\n// Map is a strong reference, so unused ids wouldn't be cleaned up otherwise.\n// This can happen in suspended components where mount/unmount is not called.\n\nlet $bdb11010cef70236$var$registry;\nif (typeof FinalizationRegistry !== 'undefined') $bdb11010cef70236$var$registry = new FinalizationRegistry(heldValue => {\n  $bdb11010cef70236$export$d41a04c74483c6ef.delete(heldValue);\n});\n\nfunction $bdb11010cef70236$export$f680877a34711e37(defaultId) {\n  let [value, setValue] = (0, $eKkEp$useState)(defaultId);\n  let nextId = (0, $eKkEp$useRef)(null);\n  let res = (0, $eKkEp$useSSRSafeId)(value);\n  let cleanupRef = (0, $eKkEp$useRef)(null);\n  if ($bdb11010cef70236$var$registry) $bdb11010cef70236$var$registry.register(cleanupRef, res);\n\n  if ($bdb11010cef70236$var$canUseDOM) {\n    const cacheIdRef = $bdb11010cef70236$export$d41a04c74483c6ef.get(res);\n    if (cacheIdRef && !cacheIdRef.includes(nextId)) cacheIdRef.push(nextId);else $bdb11010cef70236$export$d41a04c74483c6ef.set(res, [nextId]);\n  }\n\n  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {\n    let r = res;\n    return () => {\n      // In Suspense, the cleanup function may be not called\n      // when it is though, also remove it from the finalization registry.\n      if ($bdb11010cef70236$var$registry) $bdb11010cef70236$var$registry.unregister(cleanupRef);\n      $bdb11010cef70236$export$d41a04c74483c6ef.delete(r);\n    };\n  }, [res]); // This cannot cause an infinite loop because the ref is always cleaned up.\n  // eslint-disable-next-line\n\n  (0, $eKkEp$useEffect)(() => {\n    let newId = nextId.current;\n    if (newId) setValue(newId);\n    return () => {\n      if (newId) nextId.current = null;\n    };\n  });\n  return res;\n}\n\nfunction $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {\n  if (idA === idB) return idA;\n  let setIdsA = $bdb11010cef70236$export$d41a04c74483c6ef.get(idA);\n\n  if (setIdsA) {\n    setIdsA.forEach(ref => ref.current = idB);\n    return idB;\n  }\n\n  let setIdsB = $bdb11010cef70236$export$d41a04c74483c6ef.get(idB);\n\n  if (setIdsB) {\n    setIdsB.forEach(ref => ref.current = idA);\n    return idA;\n  }\n\n  return idB;\n}\n\nfunction $bdb11010cef70236$export$b4cc09c592e8fdb8() {\n  let depArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let id = $bdb11010cef70236$export$f680877a34711e37();\n  let [resolvedId, setResolvedId] = (0, $1dbecbe27a04f9af$export$14d238f342723f25)(id);\n  let updateId = (0, $eKkEp$useCallback)(() => {\n    setResolvedId(function* () {\n      yield id;\n      yield document.getElementById(id) ? id : undefined;\n    });\n  }, [id, setResolvedId]);\n  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [id, updateId, ...depArray]);\n  return resolvedId;\n}\n\nexport { $bdb11010cef70236$export$d41a04c74483c6ef as idsUpdaterMap, $bdb11010cef70236$export$f680877a34711e37 as useId, $bdb11010cef70236$export$cd8c9cb68f842629 as mergeIds, $bdb11010cef70236$export$b4cc09c592e8fdb8 as useSlotId };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;AAiBA;;AACA,IAAIA,kCAAYC,QACd,OAAOC,MAAP,KAAkB,WAAlB,IACAA,OAAOC,QADP,IAEAD,OAAOC,QAAP,CAAgBC,aAHF,CAAhB;AAMO,IAAIC,4CAA2D,IAAIC,GAAJ,EAA/D,C,CACP;AACA;AACA;;AACA,IAAIC,8BAAJ;AACA,IAAI,OAAOC,oBAAP,KAAgC,WAApC,EACED,iCAAW,IAAIC,oBAAJ,CAAkCC,SAAD,IAAC;EAC3CJ,0CAAcK,MAAd,CAAqBD,SAArB;AACF,CAFW,CAAX;;AASK,SAASE,yCAAT,CAAeC,SAAf,EAAiC;EACtC,IAAI,CAACC,KAAD,EAAQC,QAAR,IAAoB,qBAASF,SAAT,CAAxB;EACA,IAAIG,SAAS,mBAAO,IAAP,CAAb;EAEA,IAAIC,MAAM,yBAAaH,KAAb,CAAV;EACA,IAAII,aAAa,mBAAO,IAAP,CAAjB;EAEA,IAAIV,8BAAJ,EACEA,+BAASW,QAAT,CAAkBD,UAAlB,EAA8BD,GAA9B;;EAGF,IAAIhB,+BAAJ,EAAe;IACb,MAAMmB,aAAad,0CAAce,GAAd,CAAkBJ,GAAlB,CAAnB;IACA,IAAIG,cAAc,CAACA,WAAWE,QAAX,CAAoBN,MAApB,CAAnB,EACEI,WAAWG,IAAX,CAAgBP,MAAhB,EADF,KAGEV,0CAAckB,GAAd,CAAkBP,GAAlB,EAAuB,CAACD,MAAD,CAAvB;EAEJ;;EAEA,+CAAgB;IACd,IAAIS,IAAIR,GAAR;IACA,OAAO;MACL;MACA;MACA,IAAIT,8BAAJ,EACEA,+BAASkB,UAAT,CAAoBR,UAApB;MAEFZ,0CAAcK,MAAd,CAAqBc,CAArB;IACF,CAPA;EAQF,CAVA,EAUG,CAACR,GAAD,CAVH,EApBsC,CAgCtC;EACA;;EACA,sBAAU;IACR,IAAIU,QAAQX,OAAOY,OAAnB;IACA,IAAID,KAAJ,EAAaZ,SAASY,KAAT;IAEb,OAAO;MACL,IAAIA,KAAJ,EAAaX,OAAOY,OAAP,GAAiB,IAAjB;IACf,CAFA;EAGF,CAPA;EASA,OAAOX,GAAP;AACF;;AAMO,SAASY,yCAAT,CAAkBC,GAAlB,EAA+BC,GAA/B,EAA0C;EAC/C,IAAID,QAAQC,GAAZ,EACE,OAAOD,GAAP;EAGF,IAAIE,UAAU1B,0CAAce,GAAd,CAAkBS,GAAlB,CAAd;;EACA,IAAIE,OAAJ,EAAa;IACXA,QAAQC,OAAR,CAAgBC,OAAQA,IAAIN,OAAJ,GAAcG,GAAtC;IACA,OAAOA,GAAP;EACF;;EAEA,IAAII,UAAU7B,0CAAce,GAAd,CAAkBU,GAAlB,CAAd;;EACA,IAAII,OAAJ,EAAa;IACXA,QAAQF,OAAR,CAAiBC,GAAD,IAAUA,IAAIN,OAAJ,GAAcE,GAAxC;IACA,OAAOA,GAAP;EACF;;EAEA,OAAOC,GAAP;AACF;;AAOO,SAASK,yCAAT,GAAoD;EAAA,IAAjCC,QAAiC,uEAAF,EAAE;EACzD,IAAIC,KAAK1B,2CAAT;EACA,IAAI,CAAC2B,UAAD,EAAaC,aAAb,IAA8B,+CAAeF,EAAf,CAAlC;EACA,IAAIG,WAAW,wBAAY;IACzBD,cAAc;MACZ,MAAMF,EAAN;MAEA,MAAMlC,SAASsC,cAAT,CAAwBJ,EAAxB,IAA8BA,EAA9B,GAAmCK,SAAzC;IACF,CAJA;EAKF,CANe,EAMZ,CAACL,EAAD,EAAKE,aAAL,CANY,CAAf;EAQA,+CAAgBC,QAAhB,EAA0B,CAACH,EAAD,EAAKG,QAAL,KAAkBJ,QAAlB,CAA1B;EAEA,OAAOE,UAAP;AACF","names":["$bdb11010cef70236$var$canUseDOM","Boolean","window","document","createElement","$bdb11010cef70236$export$d41a04c74483c6ef","Map","$bdb11010cef70236$var$registry","FinalizationRegistry","heldValue","delete","$bdb11010cef70236$export$f680877a34711e37","defaultId","value","setValue","nextId","res","cleanupRef","register","cacheIdRef","get","includes","push","set","r","unregister","newId","current","$bdb11010cef70236$export$cd8c9cb68f842629","idA","idB","setIdsA","forEach","ref","setIdsB","$bdb11010cef70236$export$b4cc09c592e8fdb8","depArray","id","resolvedId","setResolvedId","updateId","getElementById","undefined"],"sources":["C:\\Users\\rohan\\Downloads\\crud-app-master\\crud-app-master\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\useId.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLayoutEffect} from './useLayoutEffect';\nimport {useSSRSafeId} from '@react-aria/ssr';\nimport {useValueEffect} from './';\n\n// copied from SSRProvider.tsx to reduce exports, if needed again, consider sharing\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport let idsUpdaterMap: Map<string, { current: string | null }[]> = new Map();\n// This allows us to clean up the idsUpdaterMap when the id is no longer used.\n// Map is a strong reference, so unused ids wouldn't be cleaned up otherwise.\n// This can happen in suspended components where mount/unmount is not called.\nlet registry;\nif (typeof FinalizationRegistry !== 'undefined') {\n  registry = new FinalizationRegistry<string>((heldValue) => {\n    idsUpdaterMap.delete(heldValue);\n  });\n}\n\n/**\n * If a default is not provided, generate an id.\n * @param defaultId - Default component id.\n */\nexport function useId(defaultId?: string): string {\n  let [value, setValue] = useState(defaultId);\n  let nextId = useRef(null);\n\n  let res = useSSRSafeId(value);\n  let cleanupRef = useRef(null);\n\n  if (registry) {\n    registry.register(cleanupRef, res);\n  }\n\n  if (canUseDOM) {\n    const cacheIdRef = idsUpdaterMap.get(res);\n    if (cacheIdRef && !cacheIdRef.includes(nextId)) {\n      cacheIdRef.push(nextId);\n    } else {\n      idsUpdaterMap.set(res, [nextId]);\n    }\n  }\n\n  useLayoutEffect(() => {\n    let r = res;\n    return () => {\n      // In Suspense, the cleanup function may be not called\n      // when it is though, also remove it from the finalization registry.\n      if (registry) {\n        registry.unregister(cleanupRef);\n      }\n      idsUpdaterMap.delete(r);\n    };\n  }, [res]);\n\n  // This cannot cause an infinite loop because the ref is always cleaned up.\n  // eslint-disable-next-line\n  useEffect(() => {\n    let newId = nextId.current;\n    if (newId) { setValue(newId); }\n\n    return () => {\n      if (newId) { nextId.current = null; }\n    };\n  });\n\n  return res;\n}\n\n/**\n * Merges two ids.\n * Different ids will trigger a side-effect and re-render components hooked up with `useId`.\n */\nexport function mergeIds(idA: string, idB: string): string {\n  if (idA === idB) {\n    return idA;\n  }\n\n  let setIdsA = idsUpdaterMap.get(idA);\n  if (setIdsA) {\n    setIdsA.forEach(ref => (ref.current = idB));\n    return idB;\n  }\n\n  let setIdsB = idsUpdaterMap.get(idB);\n  if (setIdsB) {\n    setIdsB.forEach((ref) => (ref.current = idA));\n    return idA;\n  }\n\n  return idB;\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as labelledby.\n * @param depArray - When to recalculate if the id is in the DOM.\n */\nexport function useSlotId(depArray: ReadonlyArray<any> = []): string {\n  let id = useId();\n  let [resolvedId, setResolvedId] = useValueEffect(id);\n  let updateId = useCallback(() => {\n    setResolvedId(function *() {\n      yield id;\n\n      yield document.getElementById(id) ? id : undefined;\n    });\n  }, [id, setResolvedId]);\n\n  useLayoutEffect(updateId, [id, updateId, ...depArray]);\n\n  return resolvedId;\n}\n"]},"metadata":{},"sourceType":"module"}